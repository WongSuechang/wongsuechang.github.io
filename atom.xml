<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WongSuechang&#39;s Blogs</title>
  
  
  <link href="http://wongsuechang.github.io/atom.xml" rel="self"/>
  
  <link href="http://wongsuechang.github.io/"/>
  <updated>2022-10-17T00:14:28.000Z</updated>
  <id>http://wongsuechang.github.io/</id>
  
  <author>
    <name>Wong Suechang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android代码规范</title>
    <link href="http://wongsuechang.github.io/2021/05/07/Android%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://wongsuechang.github.io/2021/05/07/Android%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</id>
    <published>2021-05-07T09:48:12.000Z</published>
    <updated>2022-10-17T00:14:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这份文档参考了 Google Java 编程风格规范和 Google 官方 Android 编码风格规范。该文档仅供参考，只要形成一个统一的风格，见量知其意就可。</p><h3 id="术语说明"><a href="#术语说明" class="headerlink" title="术语说明"></a>术语说明</h3><p>在本文档中，除非另有说明：</p><p>术语 class 可表示一个普通类，枚举类，接口或是annotation类型(@interface)<br>术语 comment 只用来指代实现的注释(implementation comments)，我们不使用”documentation comments”一词，而是用 Javadoc。其他的术语说明会偶尔在后面的文档出现。</p><h3 id="指南说明本文档中的示例代码并不作为规范，仅供参考。"><a href="#指南说明本文档中的示例代码并不作为规范，仅供参考。" class="headerlink" title="指南说明本文档中的示例代码并不作为规范，仅供参考。"></a>指南说明本文档中的示例代码并不作为规范，仅供参考。</h3><p>基本格式方面使用 AndroidStudio 默认模板即可（使用格式化快捷键处理后基本符合）。</p><h2 id="源文件基础"><a href="#源文件基础" class="headerlink" title="源文件基础"></a>源文件基础</h2><h3 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h3><p>源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为.java。</p><h3 id="文件编码：UTF-8"><a href="#文件编码：UTF-8" class="headerlink" title="文件编码：UTF-8"></a>文件编码：UTF-8</h3><p>源文件编码格式为 UTF-8。</p><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><h4 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h4><p>除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，这意味着：<br>所有其它字符串中的空白字符都要进行转义。<br>制表符不用于缩进（可以在IDE中Tab键设置为若干个空格）。  </p><h4 id="特殊转义序列"><a href="#特殊转义序列" class="headerlink" title="特殊转义序列"></a>特殊转义序列</h4><p>对于具有特殊转义序列的任何字符(\b, \t, \n, \f, \r, “, ‘及)，我们使用它的转义序列，而不是相应的八进制(比如\012)或Unicode(比如\u000a)转义。</p><h4 id="非ASCII字符"><a href="#非ASCII字符" class="headerlink" title="非ASCII字符"></a>非ASCII字符</h4><p>对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\u221e)，取决于哪个能让代码更易于阅读和理解。</p><p>Tip:<br>在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。<br>例如：<br>String unitAbbrev &#x3D; “μs”; | 即使没有注释也非常清晰<br>String unitAbbrev &#x3D; “\u03bcs”; &#x2F;&#x2F; “μs” | 允许，但没有理由要这样做<br>String unitAbbrev &#x3D; “\u03bcs”; &#x2F;&#x2F; Greek letter mu, “s” | 允许，但这样做显得笨拙还容易出错<br>String unitAbbrev &#x3D; “\u03bcs”; | 很糟，读者根本看不出这是什么<br>return ‘\ufeff’ + content; &#x2F;&#x2F; byte order mark | Good，对于非打印字符，使用转义，并在必要时写上注释  </p><p>Tip:<br>永远不要由于害怕某些程序可能无法正确处理非ASCII字符而让你的代码可读性变差。当程序无法正确处理非ASCII字符时，它自然无法正确运行， 你就会去fix这些问题的了。(言下之意就是大胆去用非ASCII字符，如果真的有需要的话)  </p><h2 id="源文件结构"><a href="#源文件结构" class="headerlink" title="源文件结构"></a>源文件结构</h2><p>一个源文件包含(按顺序地)：<br>许可证或版权信息(如有需要)<br>package语句<br>import语句<br>一个顶级类(只有一个)以上每个部分之间用一个空行隔开。  </p><h3 id="许可证或版权信息"><a href="#许可证或版权信息" class="headerlink" title="许可证或版权信息"></a>许可证或版权信息</h3><p>如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。</p><h3 id="package语句"><a href="#package语句" class="headerlink" title="package语句"></a>package语句</h3><p>package 语句不换行，列限制(4.4节)并不适用于package语句。(即package语句写在一行里)</p><h3 id="import语句"><a href="#import语句" class="headerlink" title="import语句"></a>import语句</h3><h5 id="import不要使用通配符"><a href="#import不要使用通配符" class="headerlink" title="import不要使用通配符"></a>import不要使用通配符</h5><p>即，不要出现类似这样的import语句：import java.util.*;</p><h5 id="不要换行"><a href="#不要换行" class="headerlink" title="不要换行"></a>不要换行</h5><p>import语句不换行，列限制(4.4节)并不适用于import语句。(每个import语句独立成行)</p><h5 id="顺序和间距"><a href="#顺序和间距" class="headerlink" title="顺序和间距"></a>顺序和间距</h5><p>import语句可分为以下几组，按照这个顺序，每组由一个空行分隔：</p><ul><li>1.所有的静态导入独立成组</li><li>2.com.google imports(仅当这个源文件是在com.google包下)</li><li>3.第三方的包。每个顶级包为一组，字典序。例如：android, com, junit, org, sun</li><li>4.java imports5.javax imports组内不空行，按字典序排列。</li></ul><h4 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h4><h5 id="只有一个顶级"><a href="#只有一个顶级" class="headerlink" title="只有一个顶级"></a>只有一个顶级</h5><p>类声明每个顶级类都在一个与它同名的源文件中(当然，还包含.java后缀)。<br>例外：package-info.java，该文件中可没有package-info类。</p><h5 id="类成员顺序"><a href="#类成员顺序" class="headerlink" title="类成员顺序"></a>类成员顺序</h5><p>类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。<br>最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如， 新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。  </p><h6 id="区块划分"><a href="#区块划分" class="headerlink" title="区块划分"></a>区块划分</h6><p>建议使用注释将源文件分为明显的区块，区块划分如下</p><ul><li>常量声明区</li><li>普通成员变量声明区</li><li>UI控件成员变量声明区</li><li>内部接口声明区</li><li>初始化相关方法区</li><li>事件响应方法区</li><li>普通逻辑方法区</li><li>重载的逻辑方法区</li><li>发起异步任务方法区</li><li>异步任务回调方法区</li><li>生命周期回调方法区（除去onCreate()方法）</li><li>内部类声明区</li></ul><h6 id="类成员排列通用规则"><a href="#类成员排列通用规则" class="headerlink" title="类成员排列通用规则"></a>类成员排列通用规则</h6><ul><li>按照发生的先后顺序排列</li><li>常量按照使用先后排列</li><li>UI控件成员变量按照layout文件中的先后顺序排列</li><li>普通成员变量按照使用的先后顺序排列</li><li>方法基本上都按照调用的先后顺序在各自区块中排列</li><li>相关功能作为小区块放在一起（或者封装掉）</li></ul><h6 id="重载：永不分离"><a href="#重载：永不分离" class="headerlink" title="重载：永不分离"></a>重载：永不分离</h6><p>当一个类有多个构造函数，或是多个同名方法，这些函数&#x2F;方法应该按顺序出现在一起，中间不要放进其它函数&#x2F;方法。</p><h2 id="格式术语"><a href="#格式术语" class="headerlink" title="格式术语"></a>格式术语</h2><p>说明：块状结构(block-like construct)指的是一个类，方法或构造函数的主体。需要注意的是，数组初始化中的初始值可被选择性地视为块状结构(4.8.3.1节)。</p><h3 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h3><h4 id="使用大括号-即使是可选的"><a href="#使用大括号-即使是可选的" class="headerlink" title="使用大括号(即使是可选的)"></a>使用大括号(即使是可选的)</h4><p>大括号与if, else, for, do, while语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。</p><h4 id="非空块：K-amp-R-风格"><a href="#非空块：K-amp-R-风格" class="headerlink" title="非空块：K &amp; R 风格"></a>非空块：K &amp; R 风格</h4><p>对于非空块和块状结构，大括号遵循 Kernighan 和 Ritchie 风格 (Egyptian brackets):</p><p>左大括号前不换行<br>左大括号后换行<br>右大括号前换行<br>如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。<br>例如，如果右大括号后面是else或逗号，则不换行。<br>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>() &#123;    </span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;        </span><br><span class="line">        <span class="keyword">if</span> (condition()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                something();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ProblemException e) &#123;</span><br><span class="line">                recover();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>4.8.1节给出了enum类的一些例外。</p><h4 id="空块：可以用简洁版本"><a href="#空块：可以用简洁版本" class="headerlink" title="空块：可以用简洁版本"></a>空块：可以用简洁版本</h4><p>一个空的块状结构里什么也不包含，大括号可以简洁地写成{}，不需要换行。<br>例外：如果它是一个多块语句的一部分(if&#x2F;else 或 try&#x2F;catch&#x2F;finally) ，即使大括号内没内容，右大括号也要换行。<br>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">doNothing</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="块缩进：4个空格"><a href="#块缩进：4个空格" class="headerlink" title="块缩进：4个空格"></a>块缩进：4个空格</h3><p>每当开始一个新的块，缩进增加4个空格，当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。(见4.1.2节中的代码示例)</p><h3 id="一行一个语句"><a href="#一行一个语句" class="headerlink" title="一行一个语句"></a>一行一个语句</h3><p>每个语句后要换行。</p><h3 id="列限制：80或100"><a href="#列限制：80或100" class="headerlink" title="列限制：80或100"></a>列限制：80或100</h3><p>一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。</p><p>不可能满足列限制的行(例如，Javadoc中的一个长URL，或是一个长的JSNI方法参考)。<br>package和import语句(见3.2节和3.3节)。<br>注释中那些可能被剪切并粘贴到shell中的命令行。  </p><h3 id="自动换行"><a href="#自动换行" class="headerlink" title="自动换行"></a>自动换行</h3><p>术语说明：一般情况下，一行长代码为了避免超出列限制(80或100个字符)而被分为多行，我们称之为自动换行(line-wrapping)。我们并没有全面，确定性的准则来决定在每一种情况下如何自动换行。很多时候，对于同一段代码会有好几种有效的自动换行方式。</p><p>Tip:提取方法或局部变量可以在不换行的情况下解决代码过长的问题(是合理缩短命名长度吧)</p><h4 id="从哪里断开"><a href="#从哪里断开" class="headerlink" title="从哪里断开"></a>从哪里断开</h4><p>自动换行的基本准则是：更倾向于在更高的语法级别处断开。</p><p>如果在非赋值运算符处断开，那么在该符号前断开(比如+，它将位于下一行)。注意：这一点与 Google 其它语言的编程风格不同(如 C++ 和 JavaScript )。<br>这条规则也适用于以下”类运算符”符号：点分隔符(.)，类型界限中的 &amp;（)，catch 块中的管道符号(catch (FooException | BarException e)<br>如果在赋值运算符处断开，通常的做法是在该符号后断开(比如&#x3D;，它与前面的内容留在同一行)。这条规则也适用于foreach语句中的分号。<br>方法名或构造函数名与左括号留在同一行。<br>逗号(,)与其前面的内容留在同一行。  </p><h4 id="自动换行时缩进至少-8个空格"><a href="#自动换行时缩进至少-8个空格" class="headerlink" title="自动换行时缩进至少+8个空格"></a>自动换行时缩进至少+8个空格</h4><p>自动换行时，第一行后的每一行至少比第一行多缩进8个空格(注意：制表符不用于缩进。见2.3.1节)。当存在连续自动换行时，缩进可能会多缩进不只8个空格(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。<br>第4.6.3水平对齐一节中指出，不鼓励使用可变数目的空格来对齐前面行的符号。</p><h3 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h3><h4 id="垂直空白"><a href="#垂直空白" class="headerlink" title="垂直空白"></a>垂直空白</h4><p>以下情况需要使用一个空行：</p><p>类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。 例外： 两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。<br>在函数体内，语句的逻辑分组间使用空行。<br>类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。<br>要满足本文档中其他节的空行要求(比如3.3节：import语句)<br>多个连续的空行是允许的，但没有必要这样做(我们也不鼓励这样做)。  </p><h4 id="水平空白"><a href="#水平空白" class="headerlink" title="水平空白"></a>水平空白</h4><p>除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空格，单个ASCII空格也出现在以下几个地方：</p><p>分隔任何保留字与紧随其后的左括号(()(如if, for catch等)。<br>分隔任何保留字与其前面的右大括号(})(如else, catch)。<br>在任何左大括号前({)，两个例外：<br>o @SomeAnnotation({a, b})(不使用空格)。<br>o String[][] x &#x3D; foo;(大括号间没有空格，见下面的Note)。<br>在任何二元或三元运算符的两侧。这也适用于以下”类运算符”符号：<br>o 类型界限中的&amp;()。<br>o catch块中的管道符号(catch (FooException | BarException e)。<br>o foreach语句中的分号。<br>在, : ;及右括号())后<br>如果在一条语句后做注释，则双斜杠(&#x2F;&#x2F;)两边都要空格。这里可以允许多个空格，但没有必要。<br>类型和变量之间：List list。<br>数组初始化中，大括号内的空格是可选的，即new int[] {5, 6}和new int[] { 5, 6 }都是可以的。<br>Note：这个规则并不要求或禁止一行的开关或结尾需要额外的空格，只对内部空格做要求。  </p><h4 id="水平对齐：不做要求"><a href="#水平对齐：不做要求" class="headerlink" title="水平对齐：不做要求"></a>水平对齐：不做要求</h4><p>术语说明：水平对齐指的是通过增加可变数量的空格来使某一行的字符与上一行的相应字符对齐。<br>这是允许的(而且在不少地方可以看到这样的代码)，但Google编程风格对此不做要求。即使对于已经使用水平对齐的代码，我们也不需要去保持这种风格。<br>以下示例先展示未对齐的代码，然后是对齐的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> x; <span class="comment">// this is fine</span></span><br><span class="line"><span class="keyword">private</span> Color color; <span class="comment">// this too</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>    x;         <span class="comment">// permitted, but future edits</span></span><br><span class="line"><span class="keyword">private</span> Color  color;     <span class="comment">// may leave it unaligned</span></span><br></pre></td></tr></table></figure><p>Tip：<br>对齐可增加代码可读性，但它为日后的维护带来问题。考虑未来某个时候，我们需要修改一堆对齐的代码中的一行。<br>这可能导致原本很漂亮的对齐代码变得错位。很可能它会提示你调整周围代码的空白来使这一堆代码重新水平对齐(比如程序员想保持这种水平对齐的风格)。<br>这就会让你做许多的无用功，增加了reviewer的工作并且可能导致更多的合并冲突。  </p><h3 id="用小括号来限定组：推荐"><a href="#用小括号来限定组：推荐" class="headerlink" title="用小括号来限定组：推荐"></a>用小括号来限定组：推荐</h3><p>除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。<br>我们没有理由假设读者能记住整个Java运算符优先级表。</p><h3 id="具体结构"><a href="#具体结构" class="headerlink" title="具体结构"></a>具体结构</h3><h4 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h4><p>枚举常量间用逗号隔开，换行可选。<br>没有方法和文档的枚举类可写成数组初始化的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">Suit</span> &#123;</span><br><span class="line">    CLUBS,</span><br><span class="line">    HEARTS,</span><br><span class="line">    SPADES,</span><br><span class="line">    DIAMONDS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于枚举类也是一个类，因此所有适用于其它类的格式规则也适用于枚举类。</p><h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><h5 id="每次只声明一个变量"><a href="#每次只声明一个变量" class="headerlink" title="每次只声明一个变量"></a>每次只声明一个变量</h5><p>不要使用组合声明，比如int a, b;。</p><h5 id="需要时才声明，并尽快进行初始化"><a href="#需要时才声明，并尽快进行初始化" class="headerlink" title="需要时才声明，并尽快进行初始化"></a>需要时才声明，并尽快进行初始化</h5><p>不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。 局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><h5 id="数组初始化：可写成块状结构"><a href="#数组初始化：可写成块状结构" class="headerlink" title="数组初始化：可写成块状结构"></a>数组初始化：可写成块状结构</h5><p>数组初始化可以写成块状结构，比如，下面的写法都是OK的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">int</span>[] &#123;</span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">int</span>[] &#123;</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>,</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">int</span>[] &#123;</span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">int</span>[]</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="非C风格的数组声明"><a href="#非C风格的数组声明" class="headerlink" title="非C风格的数组声明"></a>非C风格的数组声明</h5><p>中括号是类型的一部分：String[] args， 而非 String args[]。</p><h4 id="witch语句"><a href="#witch语句" class="headerlink" title="witch语句"></a>witch语句</h4><p>术语说明：switch块的大括号内是一个或多个语句组。<br>每个语句组包含一个或多个switch标签(case FOO:或default:)，后面跟着一条或多条语句。</p><h5 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h5><p>与其它块状结构一致，switch块中的内容缩进为2个空格。每个switch标签后新起一行，再缩进2个空格，写下一条或多条语句。</p><h5 id="Fall-through：注释"><a href="#Fall-through：注释" class="headerlink" title="Fall-through：注释"></a>Fall-through：注释</h5><p>在一个switch块内，每个语句组要么通过break, continue, return或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组， 任何能表达这个意思的注释都是OK的(典型的是用&#x2F;&#x2F; fall through)。这个特殊的注释并不需要在最后一个语句组(一般是default)中出现。<br>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (input) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        prepareOneOrTwo();        <span class="comment">// fall through</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        handleOneTwoOrThree();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        handleLargeNumber(input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="default的情况要写出来"><a href="#default的情况要写出来" class="headerlink" title="default的情况要写出来"></a>default的情况要写出来</h5><p>每个switch语句都包含一个default语句组，即使它什么代码也不包含。</p><h4 id="注解-Annotations"><a href="#注解-Annotations" class="headerlink" title="注解(Annotations)"></a>注解(Annotations)</h4><p>注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> <span class="keyword">public</span> String <span class="title function_">getNameIfPresent</span><span class="params">()</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>例外：单个的注解可以和签名的第一行出现在同一行。<br>例如：<br>@Override public int hashCode() { … }应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。<br>例如：<br>@Partial @Mock DataLoader loader;<br>参数和局部变量注解没有特定规则。</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><h5 id="块注释风格"><a href="#块注释风格" class="headerlink" title="块注释风格"></a>块注释风格</h5><p>块注释与其周围的代码在同一缩进级别。它们可以是&#x2F;* … &#x2F;风格，也可以是&#x2F;&#x2F; …风格。对于多行的&#x2F; … &#x2F;注释，后续行必须从开始， 并且与前一行的*对齐。<br>以下示例注释都是OK的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** This is // And so /* Or you can</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> \*  okay. // is this.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> \*  even do this.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> \*/</span></span><br></pre></td></tr></table></figure><p>注释不要封闭在由星号或其它字符绘制的框架里。</p><p>Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风格一样)，那么使用&#x2F;* … *&#x2F;。</p><h4 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h4><p>类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现。<br>public protected private abstract static final transient volatile synchronized native strictfp</p><h2 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h2><h3 id="对所有标识符都通用的规则"><a href="#对所有标识符都通用的规则" class="headerlink" title="对所有标识符都通用的规则"></a>对所有标识符都通用的规则</h3><p>标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式\w+。</p><h3 id="标识符类型的规则"><a href="#标识符类型的规则" class="headerlink" title="标识符类型的规则"></a>标识符类型的规则</h3><h4 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h4><p>包名全部小写，连续的单词只是简单地连接起来，不使用下划线。<br>采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名为xx（可以是公司或则个人的随便），三级包名根据应用进行命名，四级包名为模块名或层级名。<br>例如：com.machinsight.webthings</p><table><thead><tr><th>包名</th><th>此包中包含</th></tr></thead><tbody><tr><td>com.xx.应用名称缩写.activity</td><td>页面用到的Activity类 (activitie层级名用户界面层)</td></tr><tr><td>com.xx.应用名称缩写.base</td><td>基础共享的类</td></tr><tr><td>com.xx.应用名称缩写.adapter</td><td>页面用到的Adapter类 (适配器的类)</td></tr><tr><td>com.xx.应用名称缩写.util</td><td>此包中包含：公共工具方法类（util模块名）</td></tr><tr><td>com.xx.应用名称缩写.bean</td><td>下面可分：vo、po、dto 此包中包含：JavaBean类</td></tr><tr><td>com.xx.应用名称缩写.model</td><td>此包中包含：模型类</td></tr><tr><td>com.xx.应用名称缩写.db</td><td>数据库操作类</td></tr><tr><td>com.xx.应用名称缩写.view</td><td>或者 com.xx.应用名称缩写.widget,自定义的View类等</td></tr><tr><td>com.xx.应用名称缩写.service</td><td>Service服务</td></tr><tr><td>com.xx.应用名称缩写.receiver</td><td>BroadcastReceiver服务</td></tr></tbody></table><p>注意：<br>如果项目采用MVP，所有M、V、P抽取出来的接口都放置在相应模块的i包下，所有的实现都放置在相应模块的impl下</p><h4 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h4><p>类名都以UpperCamelCase风格编写。</p><p>类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。<br>名词，采用大驼峰命名法，尽量避免缩写，除非该缩写是众所周知的， 比如HTML,URL，如果类名称中包含单词缩写，则单词缩写的每个字母均应大写。  </p><table><thead><tr><th>类</th><th>描述</th><th>例如</th></tr></thead><tbody><tr><td>Activity类</td><td>Activity为后缀标识</td><td>欢迎页面类WelcomeActivity</td></tr><tr><td>Adapter类</td><td>Adapter为后缀标识</td><td>新闻详情适配器 NewsDetailAdapter</td></tr><tr><td>解析类</td><td>Parser为后缀标识</td><td>首页解析类HomePosterParser</td></tr><tr><td>工具方法类</td><td>Util或Manager为后缀标识（与系统或第三方的Utils区分）或功能+Util</td><td>线程池管理类：ThreadPoolManager,日志工具类：LogUtil（Logger也可）,打印工具类：PrinterUtil</td></tr><tr><td>数据库类</td><td>以DBHelper后缀标识</td><td>新闻数据库：NewDBHelper</td></tr><tr><td>Service类</td><td>以Service为后缀标识</td><td>时间服务TimeServiceBroadcast</td></tr><tr><td>Receiver类</td><td>以Receiver为后缀标识</td><td>推送接收JPushReceiver</td></tr><tr><td>ContentProvider</td><td>以Provider为后缀标识</td><td></td></tr><tr><td>自定义的共享基础类</td><td>以Base开头</td><td>BaseActivity,BaseFragment</td></tr><tr><td>测试类</td><td>命名以它要测试的类的名称开始，以Test结束。</td><td>例如：HashTest 或 HashIntegrationTest。</td></tr><tr><td>接口（interface）</td><td>命名规则与类一样采用大驼峰命名法，多以able或ible结尾</td><td>如interface Runnable ;interface Accessible。</td></tr></tbody></table><p>注意：<br>如果项目采用MVP，所有Model、View、Presenter的接口都以I为前缀，不加后缀，其他的接口采用上述命名规则。</p><h4 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h4><p>方法名都以 LowerCamelCase 风格编写。<br>方法名通常是动词或动词短语。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>initXX()</td><td>初始化相关方法,使用init为前缀标识，如初始化布局initView()</td></tr><tr><td>isXX()&#x2F;checkXX()</td><td>方法返回值为boolean型的请使用is或check为前缀标识</td></tr><tr><td>getXX()</td><td>返回某个值的方法，使用get为前缀标识</td></tr><tr><td>displayXX()&#x2F;showXX()</td><td>弹出提示框和提示信息，使用display&#x2F;show为前缀标识</td></tr><tr><td>handleXX()</td><td>对数据进行处理的方法，尽量使用handle为前缀标识</td></tr><tr><td>saveXX()</td><td>与保存数据相关的，使用save为前缀标识</td></tr><tr><td>resetXX()</td><td>对数据重组的，使用reset前缀标识</td></tr><tr><td>removeXXX()</td><td>移除控件或数据相关的</td></tr><tr><td>clearXX()</td><td>清除数据相关的</td></tr><tr><td>drawXXX()</td><td>绘制数据或效果相关的，使用draw前缀标识</td></tr></tbody></table><p>下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：test_，例如testPop_emptyStack。<br>并不存在唯一正确的方式来命名测试方法。</p><h4 id="常量名"><a href="#常量名" class="headerlink" title="常量名"></a>常量名</h4><p>常量名命名模式为CONSTANT_CASE，全部字母大写，用下划线分隔单词。那，到底什么算是一个常量？<br>每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时，考虑它是否真的感觉像是一个常量。<br>例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。只是永远不打算改变对象一般是不够的，它要真的一直不变才能将它示为常量。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constants</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NUMBER</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="type">final</span> <span class="variable">ImmutableListNAMES</span> <span class="operator">=</span> ImmutableList.of(<span class="string">&quot;Ed&quot;</span>, <span class="string">&quot;Ann&quot;</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Joiner</span> <span class="variable">COMMA_JOINER</span> <span class="operator">=</span> Joiner.on(<span class="string">&#x27;,&#x27;</span>); <span class="comment">// because Joiner is immutable</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> SomeMutableType[] EMPTY_ARRAY = &#123;&#125;;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">SomeEnum</span> &#123; ENUM_CONSTANT &#125;</span><br><span class="line"><span class="comment">// Not constants</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">String</span> <span class="variable">nonFinal</span> <span class="operator">=</span> <span class="string">&quot;non-final&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">nonStatic</span> <span class="operator">=</span> <span class="string">&quot;non-static&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="type">final</span> <span class="variable">SetmutableCollection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="type">final</span> <span class="variable">ImmutableSetmutableElements</span> <span class="operator">=</span> ImmutableSet.of(mutable);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(MyClass.getName());</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String[] nonEmptyArray = &#123;<span class="string">&quot;these&quot;</span>, <span class="string">&quot;can&quot;</span>, <span class="string">&quot;change&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>这些名字通常是名词或名词短语。</p><h4 id="非常量字段名"><a href="#非常量字段名" class="headerlink" title="非常量字段名"></a>非常量字段名</h4><p>非常量字段名以LowerCamelCase风格的基础上改造为如下风格：<br>基本结构为scopeVariableNameType，<br><strong>scope：范围</strong><br>非公有，非静态字段命名以m开头。<br>静态字段命名以s开头。<br>公有非静态字段命名以p开头。<br>公有静态字段（全局变量）命名以g开头。<br>public static final 字段(常量) 全部大写，并用下划线连起来。<br>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SOME_CONSTANT</span> <span class="operator">=</span> <span class="number">42</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> pField;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyClass sSingleton;  </span><br><span class="line">    <span class="type">int</span> mPackagePrivate;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mPrivate;  </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> mProtected;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> gField;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用1字符前缀来表示作用范围，1个字符的前缀必须小写，前缀后面是由表意性强的一个单词或多个单词组成的名字，而且每个单词的首写字母大写，其它字母小写，这样保证了对变量名能够进行正确的断句。<br><strong>Type：类型</strong><br>考虑到Android中使用很多UI控件，为避免控件和普通成员变量混淆以及更好达意，所有用来表示控件的成员变量统一加上控件缩写作为后缀（文末附有缩写表）。<br>对于普通变量一般不添加类型后缀，如果统一添加类型后缀，请参考文末的缩写表。<br>用统一的量词通过在结尾处放置一个量词，就可创建更加统一的变量，它们更容易理解，也更容易搜索。  </p><p>注意：如果项目中使用ButterKnife，则不添加m前缀，以LowerCamelCase风格命名。</p><p>例如，请使用 mCustomerStrFirst 和 mCustomerStrLast，而不要使用mFirstCustomerStr和mLastCustomerStr。<br>量词列表：量词后缀说明<br>First 一组变量中的第一个<br>Last 一组变量中的最后一个<br>Next 一组变量中的下一个变量<br>Prev 一组变量中的上一个<br>Cur 一组变量中的当前变量。</p><p>说明：<br>集合添加如下后缀：List、Map、Set<br>数组添加如下后缀：Arr  </p><p>注意：所有的VO（值对象）统一采用标准的lowerCamelCase风格编写，所有的DTO（数据传输对象）就按照接口文档中定义的字段名编写。</p><h4 id="参数名"><a href="#参数名" class="headerlink" title="参数名"></a>参数名</h4><p>参数名以LowerCamelCase风格编写</p><h4 id="局部变量名"><a href="#局部变量名" class="headerlink" title="局部变量名"></a>局部变量名</h4><p>局部变量名以LowerCamelCase风格编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。<br>虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。<br>即使局部变量是final和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。<br>临时变量<br>临时变量通常被取名为i，j，k，m和n，它们一般用于整型；c，d，e，它们一般用于字符型。 如： for (int i &#x3D; 0; i &lt; len ; i++)，并且它和第一个单词间没有空格。  </p><h4 id="类型变量名"><a href="#类型变量名" class="headerlink" title="类型变量名"></a>类型变量名</h4><p>类型变量可用以下两种风格之一进行命名：</p><p>单个的大写字母，后面可以跟一个数字(如：E,T,X,T2)。<br>以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT,FooBarT)。  </p><h4 id="资源文件命名规范"><a href="#资源文件命名规范" class="headerlink" title="资源文件命名规范"></a>资源文件命名规范</h4><p><em>1. 资源布局文件（XML文件（layout布局文件））：</em><br>全部小写，采用下划线命名法</p><ul><li>contentview 命名<br>必须以全部单词小写，单词间以下划线分割，使用名词或名词词组。<br>所有Activity或Fragment的contentView必须与其类名对应，对应规则为：<br>将所有字母都转为小写，将类型和功能调换（也就是后缀变前缀）。<br>例如：<font color=#FF0000 size=2>activity_main.xml</font></li><li>Dialog命名：dialog_描述.xml<br>例如：<font color=#FF0000 size=2>dialog_hint.xml</font></li><li>PopupWindow命名：ppw_描述.xml<br>例如：ppw_info.xml</li><li>列表项命名：item_描述.xml<br>例如：item_city.xml</li><li>包含项命名：模块_(位置)描述.xml<br>例如：activity_main_head.xml、activity_main_bottom.xml<br>注意：通用的包含项命名采用：项目名称缩写_描述.xml<br>例如：xxxx_title.xml</li></ul><p><em>2. 资源文件（图片drawable文件夹下）：</em><br>全部小写，采用下划线命名法，加前缀区分<br>命名模式：可加后缀 _small 表示小图, _big 表示大图，逻辑名称可由多个单词加下划线组成，采用以下规则：  </p><ul><li>用途_模块名_逻辑名称  </li><li>用途_模块名_颜色  </li><li>用途_逻辑名称  </li><li>用途_颜色<br>说明：用途也指控件类型（具体见UI控件缩写表）<br>例如：<br>btn_main_home.png按键<br>divider_maket_white.png 分割线<br>ic_edit.png 图标<br>bg_main.png 背景<br>btn_red.png 红色按键<br>btn_red_big.png 红色大按键<br>ic_head_small.png 小头像<br>bg_input.png输入框背景<br>divider_white.png白色分割线<br>如果有多种形态如按钮等除外如 btn_xx.xml（selector）</li></ul><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>btn_xx</td><td>按钮图片使用btn_整体效果（selector）</td></tr><tr><td>btn_xx_pressed</td><td>按钮图片使用btn_点击时候效果</td></tr><tr><td>btn_xx_normal</td><td>按钮图片使用btn_正常情况效果</td></tr><tr><td>btn_xx_focused</td><td>state_focused聚焦效果</td></tr><tr><td>btn_xx_disabled</td><td>state_enabled (false)不可用效果</td></tr><tr><td>btn_xx_checked</td><td>state_checked选中效果</td></tr><tr><td>btn_xx_selected</td><td>state_selected选中效果</td></tr><tr><td>btn_xx_hovered</td><td>state_hovered悬停效果</td></tr><tr><td>btn_xx_checkable</td><td>state_checkable可选效果</td></tr><tr><td>btn_xx_activated</td><td>state_activated激活的</td></tr><tr><td>btn_xx_windowfocused</td><td>state_window_focused</td></tr><tr><td>bg_head</td><td>背景图片使用bg_功能_说明</td></tr><tr><td>def_search_cell</td><td>默认图片使用def_功能_说明</td></tr><tr><td>ic_more_help</td><td>图标图片使用ic_功能_说明</td></tr><tr><td>seg_list_line</td><td>具有分隔特征的图片使用seg_功能_说明</td></tr><tr><td>sel_ok</td><td>选择图标使用sel_功能_说明</td></tr></tbody></table><p>注意：<br>使用AndroidStudio的插件SelectorChapek可以快速生成selector，前提是命名要规范。</p><p><em>3. 动画文件（anim文件夹下）：</em><br>全部小写，采用下划线命名法，加前缀区分。<br>具体动画采用以下规则：<br>模块名_逻辑名称<br>逻辑名称<br>refresh_progress.xml<br>market_cart_add.xml<br>market_cart_remove.xml<br>普通的tween动画采用如下表格中的命名方式<br>&#x2F;&#x2F; 前面为动画的类型，后面为方向  </p><table><thead><tr><th>动画命名例子</th><th>规范写法</th></tr></thead><tbody><tr><td>fade_in</td><td>淡入</td></tr><tr><td>fade_out</td><td>淡出</td></tr><tr><td>push_down_in</td><td>从下方推入</td></tr><tr><td>push_down_out</td><td>从下方推出</td></tr><tr><td>push_left</td><td>推向左方</td></tr><tr><td>slide_in_from_top</td><td>从头部滑动进入</td></tr><tr><td>zoom_enter</td><td>变形进入</td></tr><tr><td>slide_in</td><td>滑动进入</td></tr><tr><td>shrink_to_middle</td><td>中间缩小</td></tr></tbody></table><p><em>4. values中name命名</em></p><table><thead><tr><th>类别</th><th>命名</th><th>示例</th></tr></thead><tbody><tr><td>strings</td><td>strings的name命名使用下划线命名法，采用以下规则：模块名+逻辑名称</td><td>main_menu_about 主菜单按键文字<br>friend_title好友模块标题栏<br>friend_dialog_del好友删除提示<br>login_check_email登录验证<br>dialog_title 弹出框标题<br>button_ok确认键 loading加载文字</td></tr><tr><td>colors</td><td>colors的name命名使用下划线命名法，采用以下规则：<p>模块名+逻辑名称 颜色</td><td>friend_info_bgfriend_bg<br>transparent gray</td></tr><tr><td>styles</td><td>styles的name命名使用Camel命名法，采用以下规则：模块名+逻辑名称</td><td>main_tabBottom</td></tr></tbody></table><p><em>5. layout中的id命名</em><br>命名模式为：<font color=#FF0000 size=2>view缩写_view的逻辑名称</font><br>使用 AndroidStudio 的插件 ButterKnife Zelezny，生成注解非常方便。</p><h2 id="编程实践"><a href="#编程实践" class="headerlink" title="编程实践"></a>编程实践</h2><h3 id="Override：能用则用"><a href="#Override：能用则用" class="headerlink" title="@Override：能用则用"></a>@Override：能用则用</h3><p>只要是合法的，就把@Override注解给用上。</p><h3 id="捕获的异常：不能忽视"><a href="#捕获的异常：不能忽视" class="headerlink" title="捕获的异常：不能忽视"></a>捕获的异常：不能忽视</h3><p>除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个 AssertionError 重新抛出。)<br>如果它确实是不需要在catch块中做任何响应，需要做注释加以说明(如下面的例子)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt(response);</span><br><span class="line">    <span class="keyword">return</span> handleNumericResponse();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NumberFormatException ok) &#123;</span><br><span class="line"> <span class="comment">// it&#x27;s not numeric; that&#x27;s fine, just continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> handleTextResponse(response);</span><br></pre></td></tr></table></figure><p>例外：在测试中，如果一个捕获的异常被命名为expected，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常，因此在这里就没有必要加注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    emptyStack.pop();</span><br><span class="line">    fail();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchElementException expected) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态成员：使用类进行调用"><a href="#静态成员：使用类进行调用" class="headerlink" title="静态成员：使用类进行调用"></a>静态成员：使用类进行调用</h3><p>使用类名调用静态的类成员，而不是具体某个对象或表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Foo</span> <span class="variable">aFoo</span> <span class="operator">=</span> ...;</span><br><span class="line">Foo.aStaticMethod(); <span class="comment">// good</span></span><br><span class="line">aFoo.aStaticMethod(); <span class="comment">// bad</span></span><br><span class="line">somethingThatYieldsAFoo().aStaticMethod(); <span class="comment">// very bad</span></span><br></pre></td></tr></table></figure><h3 id="Finalizers-禁用"><a href="#Finalizers-禁用" class="headerlink" title="Finalizers: 禁用"></a>Finalizers: 禁用</h3><p>极少会去重载Object.finalize。</p><p>Tip：<br>不要使用finalize。如果你非要使用它，请先仔细阅读和理解Effective Java第7条款：”Avoid Finalizers”，然后不要使用它。</p><h2 id="Javadoc"><a href="#Javadoc" class="headerlink" title="Javadoc"></a>Javadoc</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><h4 id="一般形式"><a href="#一般形式" class="headerlink" title="一般形式"></a>一般形式</h4><p>Javadoc块的基本格式如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Multiple lines of Javadoc text are written here,</span></span><br><span class="line"><span class="comment">* wrapped normally...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">(String p1)</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>或者是以下单行形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** An especially short bit of Javadoc. */</span></span><br></pre></td></tr></table></figure><p>基本格式总是OK的。当整个Javadoc块能容纳于一行时(且没有Javadoc标记@XXX)，可以使用单行形式。</p><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><p>空行(即，只包含最左侧星号的行)会出现在段落之间和Javadoc标记(@XXX)之前(如果有的话)。<br>除了第一个段落，每个段落第一个单词前都有标签<p>，并且它和第一个单词间没有空格。</p><h4 id="Javadoc标记"><a href="#Javadoc标记" class="headerlink" title="Javadoc标记"></a>Javadoc标记</h4><p>标准的Javadoc标记按以下顺序出现：@param, @return, @throws, @deprecated,<br>前面这4种标记如果出现，描述都不能为空。 当描述无法在一行中容纳，连续行需要至少再缩进4个空格。</p><h3 id="摘要片段"><a href="#摘要片段" class="headerlink" title="摘要片段##"></a>摘要片段##</h3><p>每个类或成员的Javadoc以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下，它是唯一出现的文本，比如在类和方法索引中。<br>这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以A {@code Foo} is a…或This method returns…开头,<br>它也不会是一个完整的祈使句，如Save the record…。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。</p><p>Tip：<br>一个常见的错误是把简单的Javadoc写成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@return</span> the customer ID */</span></span><br></pre></td></tr></table></figure><p>这是不正确的。它应该写成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Returns the customer ID. */</span></span><br></pre></td></tr></table></figure><h3 id="哪里需要使用Javadoc"><a href="#哪里需要使用Javadoc" class="headerlink" title="哪里需要使用Javadoc"></a>哪里需要使用Javadoc</h3><p>至少在每个public类及它的每个public和protected成员处使用Javadoc，以下是一些例外：</p><h4 id="例外：不言自明的方法"><a href="#例外：不言自明的方法" class="headerlink" title="例外：不言自明的方法"></a>例外：不言自明的方法</h4><p>对于简单明显的方法如getFoo，Javadoc是可选的(即，是可以不写的)。这种情况下除了写”Returns the foo”，确实也没有什么值得写了。<br>单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。</p><p>Tip：<br>如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由。例如，对于方法名getCanonicalName，</p><p>就不应该忽视文档说明，因为读者很可能不知道词语canonical name指的是什么。</p><h4 id="例外：重载"><a href="#例外：重载" class="headerlink" title="例外：重载"></a>例外：重载</h4><p>如果一个方法重载了超类中的方法，那么Javadoc并非必需的。</p><h4 id="可选的Javadoc"><a href="#可选的Javadoc" class="headerlink" title="可选的Javadoc"></a>可选的Javadoc</h4><p>对于包外不可见的类和方法，如有需要，也是要使用Javadoc的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为，<br>那么这个注释应该写成Javadoc，这样更统一更友好。</p><div STYLE="page-break-after: always;"></div><p>附录：  </p><p><strong>表1 UI控件缩写表</strong></p><table><thead><tr><th>控件</th><th>缩写</th><th>例子</th></tr></thead><tbody><tr><td>LinearLayout</td><td>ll</td><td>llFriend或者mFriendLL</td></tr><tr><td>RelativeLayout</td><td>rl</td><td>rlMessage或mMessageRL</td></tr><tr><td>FrameLayout</td><td>fl</td><td>flCart或mCartFL</td></tr><tr><td>TableLayout</td><td>tl</td><td>tlTab或mTabTL</td></tr><tr><td>Button</td><td>btn</td><td>btnHome或mHomeBtn</td></tr><tr><td>ImageButton</td><td>ibtn</td><td>btnPlay或mPlayIBtn</td></tr><tr><td>TextView</td><td>tv</td><td>tvName或mNameTV</td></tr><tr><td>EditText</td><td>et</td><td>etName或mNameET</td></tr><tr><td>ListView</td><td>lv</td><td>lvCart或mCartLV</td></tr><tr><td>ImageView</td><td>iv</td><td>ivHead或mHeadIV</td></tr><tr><td>GridView</td><td>gv</td><td>gvPhoto或mPhotoGV</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><p><strong>表2 常见的英文单词缩写:</strong></p><table><thead><tr><th>名称</th><th>缩写</th></tr></thead><tbody><tr><td>icon</td><td>ic （主要用在app的图标）</td></tr><tr><td>color</td><td>cl（主要用于颜色值）</td></tr><tr><td>divider</td><td>di（主要用于分隔线，不仅包括Listview中的divider，还包括普通布局中的线）</td></tr><tr><td>selector</td><td>sl（主要用于某一view多种状态，不仅包括Listview中的selector，还包括按钮的selector）</td></tr><tr><td>average</td><td>avg</td></tr><tr><td>background</td><td>bg（主要用于布局和子布局的背景）</td></tr><tr><td>buffer</td><td>buf</td></tr><tr><td>control</td><td>ctrl</td></tr><tr><td>delete</td><td>del</td></tr><tr><td>document</td><td>doc</td></tr><tr><td>error</td><td>err</td></tr><tr><td>escape</td><td>esc</td></tr><tr><td>increment</td><td>inc</td></tr><tr><td>infomation</td><td>info</td></tr><tr><td>initial</td><td>init</td></tr><tr><td>image</td><td>img</td></tr><tr><td>Internationalization</td><td>I18N</td></tr><tr><td>length</td><td>len</td></tr><tr><td>library</td><td>lib</td></tr><tr><td>message</td><td>msg</td></tr><tr><td>password</td><td>pwd</td></tr><tr><td>position</td><td>pos</td></tr><tr><td>server</td><td>srv</td></tr><tr><td>string</td><td>str</td></tr><tr><td>temp</td><td>tmp</td></tr><tr><td>window</td><td>wnd(win)</td></tr></tbody></table><p>程序中使用单词缩写原则：不要用缩写，除非该缩写是约定俗成的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这份文档参考了 Google Java 编程风格规范和 Google 官方 Android 编码风格规范。该文档仅供参考，只要形成一个统一的</summary>
      
    
    
    
    
    <category term="android学习" scheme="http://wongsuechang.github.io/tags/android%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="app开发" scheme="http://wongsuechang.github.io/tags/app%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>移动端开发方案对比</title>
    <link href="http://wongsuechang.github.io/2021/05/07/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94/"/>
    <id>http://wongsuechang.github.io/2021/05/07/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94/</id>
    <published>2021-05-07T03:51:05.000Z</published>
    <updated>2021-08-01T00:32:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="传统移动端开发"><a href="#传统移动端开发" class="headerlink" title="传统移动端开发"></a>传统移动端开发</h3><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;传统的app的开发就是指原生开发，需要iOS工程师和Android工程师各自进行，iOS开发一份，Android开发一份，iOS使用的是Objective-C或者是Swift，Android使用的是Java或者是Kotlin。</p><h4 id="App原生开发"><a href="#App原生开发" class="headerlink" title="App原生开发"></a>App原生开发</h4><h5 id="原生开发的优缺点"><a href="#原生开发的优缺点" class="headerlink" title="原生开发的优缺点"></a>原生开发的优缺点</h5><ul><li>优点：</li></ul><ol><li>性能稳定，使用流畅，整体用户体验最佳</li><li>可支持离线使用</li><li>App质量和安全性有保证</li><li>开发兼容性好</li><li>功能齐全，可使用手机所有硬件</li></ol><ul><li>缺点：</li></ul><ol><li>开发以及维护成本高</li><li>开发周期长</li><li>获得新版本必须重新下载应用</li><li>内容限制（App Store上架限制）</li></ol><h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;适用于跟系统高度耦合、追求性能的场景。</p><h5 id="未来前景"><a href="#未来前景" class="headerlink" title="未来前景"></a>未来前景</h5><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;由于目前已有的各种跨平台都存在缺陷、不够成熟，加上原生开发在性能上的优势，原生开发暂时还是主流方式。</p><h3 id="移动端跨平台演进"><a href="#移动端跨平台演进" class="headerlink" title="移动端跨平台演进"></a>移动端跨平台演进</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/移动端开发方案对比/跨平台技术演进.png" alt="跨平台技术演进" title="">                </div>                <div class="image-caption">跨平台技术演进</div>            </figure><h4 id="Web-App-HTML5）开发"><a href="#Web-App-HTML5）开发" class="headerlink" title="Web App (HTML5）开发"></a>Web App (HTML5）开发</h4><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;Web App 是指基于 Web 的应用，运行于网络和标准浏览器上，相当于一个网页然后加一个 App 的壳。Web技术本身需要浏览器的支持才能进行展示和用户交互，因此主要用到的技术是HTML5、Java、CSS等。</p><h5 id="Web-App开发优缺点"><a href="#Web-App开发优缺点" class="headerlink" title="Web App开发优缺点"></a>Web App开发优缺点</h5><ul><li>优点：</li></ul><ol><li>支持设备范围广，可以跨平台</li><li>开发成本低，周期短</li><li>无需用户手动更新</li></ol><ul><li>缺点：</li></ul><ol><li>无法使用手机硬件和本地存储</li><li>对网络要求高，无法离线使用</li><li>反应速度慢，流畅性较差</li><li>图片和动画支持不高，影响用户使用体验</li></ol><h5 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h5><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;适用于快速试错，需要及时更新同时对性能和流畅度不做要求的场景，或者纯展示页面。</p><h5 id="未来前景-1"><a href="#未来前景-1" class="headerlink" title="未来前景"></a>未来前景</h5><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;动态发布、快速试错和不受限于平台，还是具有存在意义的。</p><h4 id="混合App（原生-H5）开发"><a href="#混合App（原生-H5）开发" class="headerlink" title="混合App（原生+H5）开发"></a>混合App（原生+H5）开发</h4><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;混合开发（Hybrid App开发），通常由“HTML5云网站+App应用客户端”两部份构成。混合开发也比较好理解，就是H5与原生开发的结合，主要是用js和原生技术相互调用，可以初步实现跨平台使用的效果，现在我们日常使用当中有很多App都是通过这种方式实现的。</p><h5 id="混合开发优缺点"><a href="#混合开发优缺点" class="headerlink" title="混合开发优缺点"></a>混合开发优缺点</h5><ul><li>优点：</li></ul><ol><li>原生 + H5开发，可兼顾性能和流畅度</li><li>开发成本相对较低，开发周期比原生开发短</li><li>可通过JSBridge调用原生API，访问使用手机硬件</li></ol><ul><li>缺点：</li></ul><ol><li>依赖WebView，具有不稳定性</li><li>优化难度不低，需要Web前端、Android开发以及iOS开发团队配合</li></ol><h5 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h5><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;适用于业务场景不复杂、需要动态发布的场景。</p><h5 id="未来前景-2"><a href="#未来前景-2" class="headerlink" title="未来前景"></a>未来前景</h5><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;Hybrid App 虽然开发效率高，可以跨平台，但是 Hybrid 体验比不上原生，对于需要快速试错、快速占领市场的团队来说，兼顾原生App和Web App的优缺点，可作为替代原生的方案之一。</p><p><strong>特别说明，关于更新部分，目前Android可集成成熟的热更新方案（Google Play除外）；iOS因为App Store审核机制，需要确认热更新方案能否可用。</strong></p><h4 id="语言编译转换-Xamarin"><a href="#语言编译转换-Xamarin" class="headerlink" title="语言编译转换-Xamarin"></a>语言编译转换-Xamarin</h4><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;Xamarin 是一个开放源代码平台，用于通过 .NET 构建适用于 iOS、Android 和 Windows 的新式高性能应用程序。 Xamarin 是一个抽象层，可管理共享代码与基础平台代码的通信。 Xamarin 在提供便利（如内存分配和垃圾回收）的托管环境中运行。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/移动端开发方案对比/xamarin架构.png" alt="xamarin架构" title="">                </div>                <div class="image-caption">xamarin架构</div>            </figure><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;Xamarin.Android 应用程序从 C# 编译为中间语言 (IL)，随后在启动应用程序时，再实时编译 (JIT)为本机程序集。 Xamarin.Android 应用程序在 Mono 执行环境中与 Android 运行时 (ART) 虚拟机并行运行。 Xamarin 向 Android. 和 Java. 命名空间提供 .NET 绑定。<br>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;Xamarin.iOS 应用程序完全预先 (AOT) 地从 C# 编译为本机 ARM 程序集代码。 Xamarin 使用选择器和注册器（共同称为“绑定”），使 Objective-C 和 C# 可以进行通信。</p><h5 id="Xamarin优缺点"><a href="#Xamarin优缺点" class="headerlink" title="Xamarin优缺点"></a>Xamarin优缺点</h5><ul><li>优点：</li></ul><ol><li>性能接近原生</li><li>Xamarin.Forms代码复用高达94%</li><li>强大的企业支持</li><li>完整的开发生态系统</li></ol><ul><li>缺点：</li></ul><ol><li>国内开发文档欠缺</li><li>第三方SDK的引用相对复杂</li><li>Xamarin社区不完善</li><li>不适用于重图形应用程序</li></ol><h5 id="未来前景-3"><a href="#未来前景-3" class="headerlink" title="未来前景"></a>未来前景</h5><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;由于市场占有率极低，不推荐使用。</p><h4 id="原生渲染"><a href="#原生渲染" class="headerlink" title="原生渲染"></a>原生渲染</h4><h5 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h5><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;React Native是Facebook公司于2015年4月开源的跨平台移动应用开发框架，它是Facebook早先开源的React框架在原生移动应用平台上的衍生产物，目前主要支持iOS和Android两大平台。<br>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;React Native使用JavaScript来编写应用程序，然后调用原生组件执行页面渲染操作，在提高了开发效率的同时又保留了原生的用户体验。<br>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;作为一个跨平台技术框架，RN从上到下可以分为Javascript层、C++层和Native层。其中，C++层主要用于实现动态连结库(.so)，作为中间适配层桥接，实现js端与原生端的双向通信交互。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/移动端开发方案对比/RN架构.png" alt="RN三层架构" title="">                </div>                <div class="image-caption">RN三层架构</div>            </figure><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;在RN的三层架构中，最核心的就是中间的C++层，C++层最核心的功能就是封装JavaScriptCore，用于执行对js的解析。同时，原生端提供的各种Native Module（如网络请求，ViewGroup控件模块）和JS端提供的各种JS Module（如JS EventEmiter模块）都会在C++实现的so文件中保存起来，最终通过C++层中的保存的映射实现两端的交互。</p><h6 id="RN优缺点"><a href="#RN优缺点" class="headerlink" title="RN优缺点"></a>RN优缺点</h6><ul><li>优点：</li></ul><ol><li>支持热更新</li><li>运行流畅</li><li>在Javascript和React的基础上获得完全一致的开发体验</li><li>仅需学习一次，编写任何平台（Learn once, write anywhere）</li><li>可依赖的第三方库较多</li></ol><ul><li>缺点：</li></ul><ol><li>与原生应用相比，多了一层JS解析，渲染慢一些</li><li>在Android和iOS两端，部分控件不一致</li><li>对复杂UI不太友好</li><li>对开发者要求高，除了本身JS的了解，还必须熟悉原生开发</li><li>需要维护两套代码，代码重用率在70%左右</li></ol><h6 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h6><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;适合业务场景不复杂、页面简单的小项目。</p><h5 id="Weex"><a href="#Weex" class="headerlink" title="Weex"></a>Weex</h5><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;WEEX是由阿里巴巴研发的一套移动跨平台技术框架，最初是为了解决移动开发过程中频繁发版和多端研发的问题而开发的，目前已交由apache托管。<br>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;作为一套前端跨平台技术框架，Weex建立了一套源码转换以及Native与Js通信的机制。Weex表面上是一个客户端框架，但实际上它串联起了从本地开发、云端部署到分发的整个链路。<br>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;具体来说，在开发阶段编写一个.we文件，然后使用Weex提供的weex-toolkit转换工具将.we文件转换为JS bundle，并将生成的JS bundle上传部署到云端，最后通过网络请求或预下发的方式加载至用户的移动应用客户端。当集成了Weex SDK的客户端接收到JS bundle文件后，调用本地的JavaScript引擎执行环境执行相应的JS bundle，并将执行过程中产生的各种命令发送到native端进行界面渲染、数据存储、网络通信以及用户交互响应。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/移动端开发方案对比/weex架构.png" alt="Weex架构" title="">                </div>                <div class="image-caption">Weex架构</div>            </figure><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;Weex框架中最核心的部分就是JavaScript Runtime。具体来说，当需要执行渲染操作时，在iOS环境下选择基于JavaScriptCore内核的iOS系统提供的JSContext，在Android环境下使用基于JavaScriptCore内核的JavaScript引擎。</p><h6 id="Weex优缺点"><a href="#Weex优缺点" class="headerlink" title="Weex优缺点"></a>Weex优缺点</h6><ul><li>优点：</li></ul><ol><li>入门简单，前端和移动开发易上手</li><li>更轻量，体积小巧</li><li>有良好的扩展性，比较好扩展新的 Component 和 Module</li></ol><ul><li>缺点：</li></ul><ol><li>缺少页面跳转动画</li><li>现存bug较多</li><li>社区不成熟，第三方库较少</li><li>离不开原生开发</li></ol><h6 id="适用场景-4"><a href="#适用场景-4" class="headerlink" title="适用场景"></a>适用场景</h6><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;适用于电商类App、业务场景不复杂、需要动态更新的场景，或者一些单页面。</p><h4 id="2-5-自渲染-Flutter"><a href="#2-5-自渲染-Flutter" class="headerlink" title="2.5 自渲染-Flutter"></a>2.5 自渲染-Flutter</h4><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;Flutter是谷歌公司开源的移动跨平台框架，其历史最早可以追溯到2015年的Sky项目，该项目可以同时运行在Android、iOS和Fuchsia等包含Dart虚拟机的平台上，并且性能无限接近原生平台。<br>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;与 react native 和 weex 的通过 Javascript 开发不同,Flutter使用C、C ++、Dart和Skia（2D渲染引擎）构建；旨在帮助开发人员轻松实现恒定的60fps。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/移动端开发方案对比/Flutter架构.png" alt="Flutter架构" title="">                </div>                <div class="image-caption">Flutter架构</div>            </figure><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;Flutter 主要分为 Framework 和 Engine，我们基于Framework 开发App，运行在 Engine 上。Engine 是 Flutter 的独立虚拟机，由它适配和提供跨平台支持<br>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;得益于 Engine 层，Flutter 甚至不使用移动平台的原生控件， 而是使用自己  Engine 来绘制 Widget （Flutter的显示单元），而 Dart 代码都是通过 AOT 编译为平台的原生代码，所以 Flutter 可以 直接与平台通信，不需要JS引擎的桥接。同时 Flutter 唯一要求系统提供的是 canvas，以实现UI的绘制。</p><h5 id="Flutter优缺点"><a href="#Flutter优缺点" class="headerlink" title="Flutter优缺点"></a>Flutter优缺点</h5><ul><li>优点：</li></ul><ol><li>一套代码搞定iOS和Android应用</li><li>理论上在跨平台方案上性能最佳，很接近原生</li><li>UI跨平台稳定</li><li>代码量大大减少</li></ol><ul><li>缺点：</li></ul><ol><li>Dart属于小众语言，需要重新学习</li><li>市场占有率低，第三方库较少</li><li>离不开原生开发</li></ol><h5 id="适用场景-5"><a href="#适用场景-5" class="headerlink" title="适用场景"></a>适用场景</h5><p>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;适用于跟系统交互少、页面不太复杂的场景</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="偏传统开发方案对比"><a href="#偏传统开发方案对比" class="headerlink" title="偏传统开发方案对比"></a>偏传统开发方案对比</h4><table><thead><tr><th></th><th>原生</th><th>Web</th><th>Hybrid</th></tr></thead><tbody><tr><td>适用场景</td><td>1)偏操作互动多的工具类应用</br>2)需要访问特定的原生API</br>3)对应用流畅度和性能有要求</td><td>1) 作为对非核心业务在移动端的入口补足</br>2)作为用户轻量低频使用的体验增强</br></td><td>1)原生应用的适用场景</br>2)需要频繁小幅度更新</td></tr><tr><td>开发语言</td><td>native语言</td><td>web开发语言</td><td>native+web开发语言</td></tr><tr><td>开发成本</td><td>高</td><td>低</td><td>中</td></tr><tr><td>体验</td><td>优</td><td>差</td><td>优</td></tr><tr><td>维护更新</td><td>复杂</td><td>简单</td><td>一般</td></tr><tr><td>升级灵活</td><td>低,一般通过应用商店升级</td><td>高</td><td>中,涉及native部分需要通过应用商店升级</td></tr><tr><td>资源存储</td><td>本地</td><td>服务器</td><td>本地+服务器</td></tr></tbody></table><h4 id="原生渲染与自渲染"><a href="#原生渲染与自渲染" class="headerlink" title="原生渲染与自渲染"></a>原生渲染与自渲染</h4><table><thead><tr><th></th><th>React Native</th><th>Weex</th><th>Flutter</th></tr></thead><tbody><tr><td>平台实现</td><td>JavaScript</td><td>JavaScript</td><td>无桥接，原生编码</td></tr><tr><td>引擎</td><td>JSCore</td><td>JS V8</td><td>Flutter engine</td></tr><tr><td>核心语言</td><td>React</td><td>Vue</td><td>Dart</td></tr><tr><td>bundle文件大小</td><td>默认单一，较大</td><td>较小，多页面多文件</td><td>不需要</td></tr><tr><td>上手难度</td><td>较难</td><td>容易</td><td>一般</td></tr><tr><td>框架程度</td><td>较重</td><td>轻</td><td>重</td></tr><tr><td>特点</td><td>适合开发整体App</td><td>适合单页面</td><td>适合开发整体App</td></tr><tr><td>支持</td><td>社区活跃，第三方库较多</td><td>社区不成熟，第三方库较少</td><td>发布不久，第三方库较少</td></tr><tr><td>平台</td><td>Android&amp;iOS</td><td>web、Android&amp;iOS</td><td>Android&amp;iOS（不止于此）</td></tr><tr><td>issues&#x2F;open(截至2021.5.6)</td><td>21246&#x2F;1343</td><td>940&#x2F;231</td><td>53985&#x2F;8959</td></tr></tbody></table><!-- #### 3.3 方案选择--><!-- &ensp;&ensp;&ensp;&ensp;目前，在捞活App中，我们采用Hybrid方式开发，大部分UI与业务逻辑采用原生开发，少量业务通过WebView加载H5页面，通过JSBridge与原生通信。--><!-- &ensp;&ensp;&ensp;&ensp;在不考虑跨平台开发的前提下，个人想法是继续沿用当前的开发方案，Web端和Android端约定功能边界和统一的通信协议，方便后期功能扩展。另外采取热更新的方式，随时修复线上版本有可能出现的Bug。--><!-- &ensp;&ensp;&ensp;&ensp;否则，我的想法是倾向于Flutter和React Native开发方案作为备用。Flutter和React Native的背后分别是Google和Facebook，社区成熟而且活跃，官方文档资料详细。-->]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;传统移动端开发&quot;&gt;&lt;a href=&quot;#传统移动端开发&quot; class=&quot;headerlink&quot; title=&quot;传统移动端开发&quot;&gt;&lt;/a&gt;传统移动端开发&lt;/h3&gt;&lt;p&gt;&amp;amp;ensp;&amp;amp;ensp;&amp;amp;ensp;&amp;amp;ensp;传统的app的开发就</summary>
      
    
    
    
    
    <category term="app开发" scheme="http://wongsuechang.github.io/tags/app%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>美团配送数据治理实践</title>
    <link href="http://wongsuechang.github.io/2020/03/23/%E7%BE%8E%E5%9B%A2%E9%85%8D%E9%80%81%E6%95%B0%E6%8D%AE%E6%B2%BB%E7%90%86%E5%AE%9E%E8%B7%B5/"/>
    <id>http://wongsuechang.github.io/2020/03/23/%E7%BE%8E%E5%9B%A2%E9%85%8D%E9%80%81%E6%95%B0%E6%8D%AE%E6%B2%BB%E7%90%86%E5%AE%9E%E8%B7%B5/</id>
    <published>2020-03-23T07:59:09.000Z</published>
    <updated>2020-06-10T20:10:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者:<br>王鹏，2016 年加入美团点评，目前在配送事业部数据团队负责众包业务数据建设、数据治理和系统化相关工作。<br>家豪，2018 年加入美团点评，目前在配送事业部数据团队负责众包业务数据建设、数据治理和系统化相关工作。</p><p>背景</p><p>　　大数据时代的到来，让越来越多的企业看到了数据资产的价值。将数据视为企业的重要资产，已经成为业界的一种共识，企业也在快速探索应用场景和商业模式，并开始建设技术平台。<br>但这里要特别强调一下，如果在大数据“拼图”中遗忘了数据治理，可能再多的技术投入也是一种徒劳。因为没有数据治理这一环节，其带来后果往往是：随处可见的数据不统一，难以提升的数据质量，难以完成的模型梳理，难以保障的数据安全等等，源源不断的基础性数据问题会进一步产生，进而导致数据建设难以真正发挥其商业价值。<br>　　因此，消除数据的不一致性，建立规范的数据标准，提高数据治理能力，实现数据安全共享，并能够将数据作为企业的宝贵资产应用于业务、管理、战略决策中，发挥数据资产价值变得尤为迫切和重要，数据治理呼之欲出。本文将介绍美团配送技术团队在数据治理方面的一些探索和实践，希望能够对大家有所启发和帮助。</p><h3 id="如何理解数据治理"><a href="#如何理解数据治理" class="headerlink" title="如何理解数据治理"></a>如何理解数据治理</h3><p>　　数据治理，从严格的定义来讲是对组织的大数据管理并利用其进行评估、指导和监督的体系框架。企业通过制定战略方针、建立组织架构、明确职责分工等，实现数据的风险可控、安全合规、绩效提升和价值创造，并提供创新的大数据服务。从个人实践的层面来讲，数据治理是对存量数据治理和增量数据管控的一个过程，对存量数据实现由乱到治、建章立制，对增量数据实现严格把控、行不逾矩的约束。<br>　　数据治理本身并不是目的，它只是实现组织战略目标的一个手段而已。从组织职能和体量大小方面来看，不同类型组织的数据治理目标大不相同，而基于目前美团配送数据团队所处的组织职能和发展阶段来说，我们希望通过数据治理解决数据生产、管理和使用过程中遇到的问题，完善已有的生产管理流程规范，保障数据安全和数据一致性，从而促进数据在组织内无障碍地进行共享。</p><h3 id="要达成的目标"><a href="#要达成的目标" class="headerlink" title="要达成的目标"></a>要达成的目标</h3><h3 id="何时进行数据治理"><a href="#何时进行数据治理" class="headerlink" title="何时进行数据治理"></a>何时进行数据治理</h3><p>　　找准数据治理的切入点，是关乎数据治理成败的关键。很多同学会问，如果将数仓建设分为数仓雏形阶段、数仓迭代阶段和能力沉淀阶段，数据治理应该在哪个阶段切入为宜呢？其实，我们不该把数据治理看作是一个阶段性的项目，它应该是一个贯彻数据建设各阶段的长期工程，只是在不同阶段根据业务特点和技术特点其覆盖的范围和关注的目标有所不同而已。<br>　　在数仓雏形阶段，也就是美团配送业务刚成立时，在该阶段中业务有两个特点：第一，重规模、快扩张；第二，业务变化快，数据需求多。为了快速响应业务的需求，并能够保障数据交付结果的准确性，我们主要进行技术规范和指标口径的治理，在规范治理方面，通过制定一系列研发规范来保障研发质量，并在实际建模过程中不断迭代和完善我们的研发质量。在指标治理方面，我们对存量指标口径进行梳理，从而确保指标口径对外输出一致。<br>　　在数仓迭代阶段，我们希望通过架构治理改变前期开发的“烟囱式”模型，消除冗余，提升数据一致性。并且随着数仓中管理的数据越多，数据安全和成本问题也变得越发重要。所以在该阶段，我们在产研层面逐步开展架构治理、资源治理和安全治理。在架构治理方面，我们明确了数仓中各层和各主题的职责和边界，构建一致的基础数据核心模型，并制定一系列的指标定义规范来确保指标的清晰定义，并基于业务迭代来不断完善和迭代相应的模型和规范。在资源治理方面，我们通过对不同层级的数据采用不同生命周期管理策略，确保用最少的存储成本来满足最大的业务需求。在安全治理方面，我们通过制定一系列的数据安全规范来确保数据的使用安全。<br>　　在能力沉淀阶段，我们基于前两个阶段所做的业务和技术沉淀，将前期一系列规范形成标准，从业务到产研，自上而下地推动数据治理，并通过建立相应的组织、流程和制度来保障标准在该阶段的全面落地实施，并通过建设数据治理平台来辅助更高质量地执行标准。</p><h3 id="如何开展数据治理"><a href="#如何开展数据治理" class="headerlink" title="如何开展数据治理"></a>如何开展数据治理</h3><p>　　从大的阶段来看，数据治理主要分为存量数据“由乱到治”的阶段，以及增量数据严格按照规章制度实施确保“行不逾矩”的运营阶段。在“由乱到治”的过程中，我们需要沉淀出规章制度、标准规范，以及辅以规章制度标准规范实施的工具和组织。在增量数据的运营阶段，我们主要靠对应的组织确保规章制度的落实，通过审计定期考察实施效果，并在长期的运营中不断完善规章制度。在实现存量数据“由乱到治”的阶段，我们主要采取了“两步走”策略，具体执行策略如下所示。</p><h4 id="定标准，提质量"><a href="#定标准，提质量" class="headerlink" title="定标准，提质量"></a>定标准，提质量</h4><p>　　第一步，主要围绕着业务标准、技术标准、数据安全标准和资源管理标准进行展开。通过业务标准，指导一线团队完成指标的规范定义，最终达成业务对指标认知一致性这一目标；然后通过技术标准来指导研发同学规范建模，从技术层面解决模型扩展性差、冗余多等问题并保障数据一致性；通过安全标准来指导我们加强数据的安全管控，确保数据拿不走、走不脱，针对敏感数据，用户看不懂；通过资源管理标准的制定，帮助我们在事前做好资源预算，在事中做好资源管理，在事后做好账单管理。</p><h5 id="业务标准"><a href="#业务标准" class="headerlink" title="业务标准"></a>业务标准</h5><p>　　业务标准主要是指标的管理和运营标准，我们主要解决三个问题：指标由谁来定义，指标该如何定义，指标该如何运营。基于这三个问题，我们同时提出了三条原则：<br>•业务团队负责指标的定义。<br>•产研商分负责给出指标定义标准和辅助工具，辅助业务团队完成指标的规范定义，达成指标认知一致性这一目标。<br>•最后由指标管理委员会负责指标的管理与运营，保障指标从创建、审核、上线以及到最后消亡的整个生命周期的运营。<br>　　为统一指标的定义，我们将指标分为原子指标、衍生指标和派生指标，原子指标通过限定条件和时间的限定生成衍生指标。衍生指标间的“四则混合运算”构成了派生指标。我们不但制定了指标的标准定义，还对其做了准确的资产归属，一个指标出自一个具体的业务过程，一个业务过程归属于不同的数据域，多个数据域构成了美团配送业务线下的分析场景，如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/指标定义标准.png" alt="指标定义标准" title="">                </div>                <div class="image-caption">指标定义标准</div>            </figure><h5 id="技术标准"><a href="#技术标准" class="headerlink" title="技术标准"></a>技术标准</h5><p>　　这里所说的技术标准，主要是针对数据 RD 提出的建模标准和数据生产规范，通过建模标准来明确数仓分层架构，并清晰定义每一层的边界与职责，采用维度建模的设计理念。我们的整个仓库架构分为四层：操作层、基础事实层、中间层和应用层，并在每一层同步制定对应的建模规范，如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/数仓架构以及建模标准.png" alt="数仓架构以及建模标准" title="">                </div>                <div class="image-caption">数仓架构以及建模标准</div>            </figure><p>　　除了建模标准外，我们还制定了涵盖从生产到运维环节的生产规范以保障模型的质量，主要包括上线前的模型评审、生产过程中的完成元数据配置、DQC、SLA 和生命周期设置以及上线后的日常运维机制等等。尤其针对元数据管理和生命周期管理，我们分别制定了仓库每一层元数据维护规范和生命周期管理规范，其中元数据管理规范，是依据数仓各层级中各种类型表的建模标准来制定，需要做到规范命名，明确数据归属，并打通业务元数据和技术元数据之间的关系。而生命周期管理规范，是依据配送业务特点和数仓各层级现状来制定的，如下表所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/仓库各层元数据管理标准.png" alt="仓库各层元数据管理标准" title="">                </div>                <div class="image-caption">仓库各层元数据管理标准</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/仓库各层生命周期管理策略.png" alt="仓库各层生命周期管理策略" title="">                </div>                <div class="image-caption">仓库各层生命周期管理策略</div>            </figure><h5 id="安全标准"><a href="#安全标准" class="headerlink" title="安全标准"></a>安全标准</h5><p>　　围绕数据安全标准，首先要有数据的分级、分类标准，确保数据在上线前有着准确的密级。第二，针对数据使用方，要有明确的角色授权标准，通过分级分类和角色授权，来保障重要数据拿不走。第三，针对敏感数据，要有隐私管理标准，保障敏感数据的安全存储，即使未授权用户绕过权限管理拿到敏感数据，也要确保其看不懂。第四，通过制定审计标准，为后续的审计提供审计依据，确保数据走不脱。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/安全标准建设.png" alt="安全标准建设" title="">                </div>                <div class="image-caption">安全标准建设</div>            </figure><h5 id="资源管理标准"><a href="#资源管理标准" class="headerlink" title="资源管理标准"></a>资源管理标准</h5><p>　　在资源管理方面，配送技术工程部已经对资源管理涉及的内容进行了合理抽象和准确定义，抽象出租户、资源和项目组等概念。不管是后续的资源预算还是资源管理，我们都需要基于租户和项目组来进行运营，因此，对于业务团队而言，我们只需要将租户和项目组特定职能划分清楚，然后根据不同的职能归属我们的资产，并分配生产该资产所需要的资源。为了方便后续的运营，我们对每个租户和项目组分配确定了责任人，由责任人对运营结果负责。<br>　　对业务部门来说，资源管理的关键是对数据资产做清晰的分类，基于数据的分类划分不同的租户和项目组，将数据和租户、项目组实现一一映射。由于租户和项目组都有特定的责任人对其负责，因此，我们通过这种映射关系，不仅实现了资产的隔离，还实现了资产确权（项目组负责人同时对资产负责和运营）。我们整体将数据分为两大类，一是原始数据，包括流到数据中心的数据和日志中心的数据，针对流入数据中心的数据，根据其产生的方式不同，又进一步分为业务数据和流量数据。二是加工数据，对应着数据团队的仓库建设和其他团队的集市建设。基于上述的描述，针对资源管理，我们做了如下划分和确权：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/资源划分与管理.png" alt="资源划分与管理" title="">                </div>                <div class="image-caption">资源划分与管理</div>            </figure><h4 id="重实施，保落实"><a href="#重实施，保落实" class="headerlink" title="重实施，保落实"></a>重实施，保落实</h4><p>　　第二步，落实第一步的标准，完成数据治理第一阶段的目标，实现存量数据“由乱到治”，并完成相应组织和工具的建设，为实现第二阶段“行不逾矩”这一目标提供工具和组织能力。在此过程中，主要分成三个方面的治理工作：第一，架构模型“由乱到治”的治理，消除模型冗余、跨层引用和链路过长等问题，在架构上保证模型的稳定性和数据一致性；第二，元数据“由乱到治”的治理，实现指标的标准定义、技术元数据的完整采集并建立指标与表、字段的映射关系，彻底解决指标认知一致性，以及用户在使用数据过程中的“找数难”等问题；第三，围绕着隐私安全和共享安全加强数据的安全管控来实现数据走不脱、拿不走，以及隐私数据看不懂这一目标。</p><h5 id="架构治理"><a href="#架构治理" class="headerlink" title="架构治理"></a>架构治理</h5><p>　　总结起来，架构方面的治理主要是解决两个问题：第一，模型的灵活性，避免需求变更和业务迭代对核心模型带来的冲击，让 RD 深陷无休止的需求迭代中；第二，数据一致性，消除因模型冗余、跨层引用等问题带来的数据一致性问题。</p><h6 id="模型灵活性"><a href="#模型灵活性" class="headerlink" title="模型灵活性"></a>模型灵活性</h6><p>　　配送解决的是效率、成本和体验三者之间的平衡问题，即在满足一定用户体验的条件下，如何提升骑手配送效率，服务更多的商家，以及如何管控骑手，降低配送成本。抽象到数据层面，基本上反映为上游包裹来源的变化、配送对外提供服务的变化以及对内业务管控的变化。为屏蔽业务迭代给核心模型带来的冲击，我们通过对外封装包裹属性和对内封装运单属性，抽象出包裹来源、提供服务、业务架构等一致性维度，任何业务迭代在数据层面只涉及维度的调整，大大降低了对核心模型冲击和“烟囱式”数据建设问题（新来一个业务，就拉起一个分支进行建设）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/包裹事实分配到运单明细构造单一运单模型.png" alt="包裹事实分配到运单明细构造单一运单模型" title="">                </div>                <div class="image-caption">包裹事实分配到运单明细构造单一运单模型</div>            </figure><p>　　配送指标体系建设的一个重点就是要输出各组织层级的规模、体验和效率指标，实现对运力的有效管控，运力所属组织的层级关系会随业务的迭代而不断变化。为了适应这种变化，避免仅仅因增加维度带来中间层数据的重复建设，我们将组织层级维表由固定层级建模方式调整为桥接表的方式来自适配组织层级变化，从而实现了中间层模型可以自动适配组织层级的变化，能自动产生新维度的指标。如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/桥接表自适配组织层级灵活变动.png" alt="桥接表自适配组织层级灵活变动" title="">                </div>                <div class="image-caption">桥接表自适配组织层级灵活变动</div>            </figure><p>　　在精细化分析的场景下，业务会有分时段、分距离段以及分价格段的数据分析诉求。我们以分时段为例，有晚高峰、午高峰、下午茶等不同的分时段，不同的业务方对同一个时段的定义口径不同，即不同的业务方会有不同的分时段策略。为解决该场景下的分析诉求，我们在事实表中消除退化维度，将原来封装到事实表的时段逻辑迁移到维度表中，并将事实表中的时间进行按特定的间隔进行刻度化作为维表中的主键，将该主键作为事实表的外键。这样，针对业务不同的时间策略需要，我们就可以在维表中进行配置，避免了重复调整事实表和反复刷数的问题。即通过将时间、价格、距离事实刻度化，实现灵活维度分析。如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/通过将时间刻度化，实现灵活分析.png" alt="通过将时间刻度化，实现灵活分析" title="">                </div>                <div class="image-caption">通过将时间刻度化，实现灵活分析</div>            </figure><h6 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h6><p>　　数据一致性得不到保障的一个根本原因，是在建模的过程中没有实现业务口径标签化，并将业务口径下沉到主题层。很多同学在基于需求进行开发时，为实现方便，将新指标口径通过“Case When”的方式在应用层和中间层进行封装开发，主题层建设不能随着业务的迭代不断完善，RD 在开发过程中会直接引用仓库的快照表在中间层或应用层完成需求开发。久而久之，就会造成数据复用性低下，相同指标的口径封装在不同的应用表来满足不同报表的需求，但随着应用的增多，很难保障相同指标在不用应用表封装逻辑的一致性，数据一致性难以得到保障，同时这种方式还带来两个严重后果：第一，跨层引用增多，数据复用性低下，造成计算和存储成本的浪费；第二，一旦指标口径发生变化，将是一个“灾难”，不仅影响评估是一个问题，而且涉及该指标的应用层逻辑调整对 RD 来说也是一个巨大的挑战。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/治理前模型架构.png" alt="治理前模型架构" title="">                </div>                <div class="image-caption">治理前模型架构</div>            </figure><p>　　因此，我们在“由乱到治”的治理过程中，以衍生事实的方式实现业务口径标签化，将业务逻辑下沉到主题层，消除跨层引用和模型冗余等问题，从技术层面保障数据一致性是该阶段架构治理的重点。我们在业务上，已经划分了严格的数据域和业务过程，在主题建设层面，将业务划分的数据域作为我们的主题，并基于业务过程进行维度建模，将属于该业务过程的指标口径封装在对应业务过程下的衍生事实中。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/治理后模型架构.png" alt="治理后模型架构" title="">                </div>                <div class="image-caption">治理后模型架构</div>            </figure><h5 id="元数据治理"><a href="#元数据治理" class="headerlink" title="元数据治理"></a>元数据治理</h5><p>　　元数据治理主要解决三个问题：首先，通过建立相应的组织、流程和工具，推动业务标准的落地实施，实现指标的规范定义，消除指标认知的歧义；其次，基于业务现状和未来的演进方式，对业务模型进行抽象，制定清晰的主题、业务过程和分析方向，构建完备的技术元数据，对物理模型进行准确完善的描述，并打通技术元数据与业务元数据的关系，对物理模型进行完备的刻画；第三，通过元数据建设，为使用数据提效，解决“找数、理解数、评估”难题以及“取数、数据可视化”等难题。<br>首先，为保障业务标准的顺利实施，实现业务对指标认知一致性这一目标。我们协同产研、商分、业务部门推动成立了度量衡委员会，并建立起指标运营机制，通过组织保障来实现指标运营按照规范的标准和流程实施。如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/指标注册流程.png" alt="指标注册流程" title="">                </div>                <div class="image-caption">指标注册流程</div>            </figure><p>　　其次，基于配送业务的现状和未来演进方式，我们进行了高度的业务抽象，完成了主题、业务过程和分析方向等元数据内容的建设。配送即物流，通过线上系统和线下运营，我们将用户的配送需求和美团的运力进行有效的资源配置，实现高服务体验、低成本的配送服务。对外，我们将配送服务通过平台化的方式，提供给用户、商户和电商平台，以满足不同用户在不同业务场景下的配送需求。对内，我们通过不同的调度模式将运单池中的运单调度给合适的骑手来完成履约，平衡规模、成本和体验之间的关系。如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/配送业务模式抽象.png" alt="配送业务模式抽象" title="">                </div>                <div class="image-caption">配送业务模式抽象</div>            </figure><p>　　基于以上的业务模式，我们划分了运单主题（对履约数据域下的数据进行构建，支撑规模和体验的数据分析需求）、调度主题（调度数据域下产生的数据，用于支撑调度策略的分析）、结算、评价、投诉、取消主题（用于支撑体验、成本数据分析需求）和管控主题（用于支撑运力奖惩、违规和招募分析需求）等各种主题，并在每个主题下划分对应的业务过程，在应用层制定分析方向的分析标签，通过对元数据内容的建设完成对业务的抽象，为物理模型的刻画准备了基础数据。</p><p>　　第三，元数据服务建设，我们打通了元数据从采集到构建再到应用的整条链路，为使用数据提效，解决“找数、理解数、评估”难题以及“取数、数据可视化”难题。在整个建设过程中，我们围绕着元数据采集、元模型构建、元数据服务以及最后的产品应用进行展开，整体架构如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/元数据建设架构图.png" alt="元数据建设架构图" title="">                </div>                <div class="image-caption">元数据建设架构图</div>            </figure><h6 id="元数据采集"><a href="#元数据采集" class="headerlink" title="元数据采集"></a>元数据采集</h6><p>　　元数据采集分为人工录入和自动抽取，通过人工录入的方式实现物理表的准确归属（包括该表属于仓库哪一层、对应的主题、业务过程、星型模型关系等）以及指标的采集，从而完成技术元数据和业务元数据的采集，通过自动抽取的方式完成生产元数据的采集和使用元数据的采集，主要包括：物理模型的依赖关系、存储占用、热度、等信息。</p><h6 id="元模型构建"><a href="#元模型构建" class="headerlink" title="元模型构建"></a>元模型构建</h6><p>　　分为以物理表为核心的基础元模型构建，以及以血缘为中心的血缘元模型。基础元模型构建以物理表为中心，打通其与技术元数据（主题、业务过程、Schema）的关系，实现了物理表的清晰归属，打通其与生产元数据的关系，为其加上了物理表查询热度、资源消耗、查询密级等生产使用信息，打通其与指标、维度和应用的对应关系，为上层的取数应用建立了完备的元数据。血缘元模型以血缘为中心，不仅构建了从上游业务表到仓库离线表的物理血缘，而且打通了仓库离线表到下游对应报表的血缘，为后续的影响评估构建了完备的元数据基础。</p><h6 id="元数据服务"><a href="#元数据服务" class="headerlink" title="元数据服务"></a>元数据服务</h6><p>　　统一元数据服务（OneService），主要提供两类元数据服务，提供查询表、指标、维度基本信息的基础元数据服务以及查询表级血缘、字段级血缘的血缘服务。</p><h6 id="元数据应用"><a href="#元数据应用" class="headerlink" title="元数据应用"></a>元数据应用</h6><p>　　主要孵化出了三个产品，以“找数、理解数、影响评估”为应用场景的数据地图（Wherehows），以“取数、数据可视化”为应用场景的数据可视化（QuickSight），以及以管理审计为目的的管理审计报表。</p><h5 id="安全治理"><a href="#安全治理" class="headerlink" title="安全治理"></a>安全治理</h5><p>　　安全治理主要加强了敏感数据的安全治理和数据共享环节的安全治理。通过对隐私数据的安全治理，不仅要保证其在存储环节的不可见性，而且还要保证在其使用环节对用户进行双重鉴权，字段的密级鉴权和解密的密钥鉴权；通过对数据共享环节的安全治理，我们在数据分级分类的基础上，使数据的权限控制从表级权限控制扩展到行级权限控制。</p><h6 id="敏感数据安全治理"><a href="#敏感数据安全治理" class="headerlink" title="敏感数据安全治理"></a>敏感数据安全治理</h6><p>　　敏感数据的安全治理，主要是解决敏感数据的存储安全和使用安全。离线场景下，敏感数据存储安全要解决两大挑战：<br>•确保仓库侧处理方案既要屏蔽上游业务系统变动带来的影响，又要屏蔽自身策略对下游 BI 系统的影响。<br>•要避免敏感数据在整个加工链路中的扩散。<br>　　因此，为解决仓库处理方案与上游业务系统和下游 BI 系统的解耦问题，我们在上游敏感数据落到 ODS 环节，确保落到 ODS 层的敏感数据必须是明文，为保障其安全，对 ODS 层的所有数据进行文件加密，但是在使用层面，对下游链路透明保障下游链路的正常生产，并限制 ODS 层数据权限的开放。<br>　　ODS 层数据只用于安全生产，通过此方案既屏蔽了上游处理方案对仓库的影响，又解决了敏感数据的安全问题。当数据从离开仓库时，在传输环节对敏感数据进行可逆操作，将敏感数据以明文的形式推入 BI 库，实现与下游 BI 系统的解耦。为解决敏感数据在整个生产链路的扩散，我们在快照层对敏感数据进行脱敏处理，从快照层开始消除敏感数据，为保障敏感数据的可逆性，将 ODS 层的敏感数据抽取到安全库中并进行加密存储，实现安全独立管理。具体执行如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/敏感数据安全治理.png" alt="敏感数据安全治理" title="">                </div>                <div class="image-caption">敏感数据安全治理</div>            </figure><p>　　针对敏感数据的使用安全，我们通过对敏感字段的权限控制和对解密密钥的权限控制，来实现敏感数据使用安全这一目标。针对单独抽取的敏感数据，我们除了针对敏感数据设置其相应的密级确保敏感数据的权限管控外，还基于 “ 暗语 “ 的加密方式为每个项目组分配一个相同的密钥，并且将该密钥存放到与 Hadoop 集群集成的 KMS 进行管理（确保支撑离线计算的高并发），确保解密时实现密钥的权限管控。</p><h6 id="共享环节安全治理"><a href="#共享环节安全治理" class="headerlink" title="共享环节安全治理"></a>共享环节安全治理</h6><p>　　针对共享环节的安全治理，我们主要是在数据生产环节完成数据的分级分类和数据确权，在数据的使用环节完成数据的表级权限控制和行级权限控制。确保数据在使用环节规范的审批流转，权限开放以后的安全审计，保证数据走不脱。<br>　　首先，我们在生产环节 B3、B2、B1 层数据按照主题或实体 C 层数据按照应用方向进行逻辑划分，并设定资源的密级和权限负责人。特别地为实现 B3 层数据在查询环节可按照业务线进行权限管控这一目标（即行级鉴权），针对 B3 层数据，我们标记该数据需要在查询环节进行行级权限管控，标记使用行级鉴权所需的字段和该字段对应的枚举值。<br>　　其次，在使用环节，我们按照资产密级和使用人角色完成数据的审批流转，实现数据的安全共享。<br>　　第三，针对 B3 层数据，审计是否设置了行级权限管控。在数据开放时是否存在越权使用的情况，以及针对即将离职员工加强数据的使用审计，保证数据走不脱。<br>在数据“由乱到治”的治理过程中，我们不仅实现了存量数据的“由乱到治”，并且在此过程中沉淀出了一系列的建模方法论、工具，并建立了相应的安全小组和指标运营组织。同时，我们为后续增量数据治理确保数据建设“行不逾矩”，提供了强有力的组织保障、稳定的辅助工具和严格的执行标准。在数据治理的第二阶段实现增量数据的“行不逾矩”的过程中，我们主要围绕大数据架构审计、大数据安全与隐私管理审计、大数据质量管理审计和大数据生命周期管理审计这四方面的工作展开，保障治理工作的持续进行，不断提高了组织的治理水平。</p><h3 id="工具简介"><a href="#工具简介" class="headerlink" title="工具简介"></a>工具简介</h3><h4 id="数据地图（Wherehows）"><a href="#数据地图（Wherehows）" class="headerlink" title="数据地图（Wherehows）"></a>数据地图（Wherehows）</h4><p>　　数据地图作为元数据应用的一个产品，聚焦于数据使用者的“找数”场景，实现检索数据和理解数据的“找数”诉求。我们通过对离线数据集和在线数据集的元数据刻画，满足了用户找数和理解数的诉求，通过血缘图谱，完成物理表到产品的血缘建设，消除用户人肉评估的痛苦。</p><h5 id="离线数据场景"><a href="#离线数据场景" class="headerlink" title="离线数据场景"></a>离线数据场景</h5><ol><li><p>关键字检索和向导查询共同解决了“找数据”的问题：大部分的检索数据场景下，数据使用者都可以通过关键字检索来得到匹配结果。剩下的一小部分场景，例如，对于新人入职后如何了解整个数仓和指标的体系（数仓分几层，每层解决什么问题，都孵化出什么模型；整个指标、维度体系都是怎么分类，有哪些指标和维度），这部分场景可以使用向导查询功能。向导查询相当于分类查询，将表和指标按照业务过程进行分类，用户可以按照分类逐步找到想要的表或指标。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/关键字检索找数据.png" alt="关键字检索找数据" title="">                </div>                <div class="image-caption">关键字检索找数据</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/向导查询找数据.png" alt="向导查询找数据" title="">                </div>                <div class="image-caption">向导查询找数据</div>            </figure></li><li><p>我们打通了业务元数据和技术元数据之间的关系，提高了“找数据”的能力：通过“Wherehows”查找到指标后，不仅不可查看指标的业务定义，还能查看指标的技术实现逻辑，指标在哪些维度或维度组合中已经实现，并且能够在哪张表里找到这些维度，或维度组合的指标数据。反之，也可以知道在某个维度下已经实现了哪些指标，对应的指标在哪些表里。这些功能能让用户更加方便地找到想要的数据。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/打通业务元和技术元.png" alt="打通业务元和技术元" title="">                </div>                <div class="image-caption">打通业务元和技术元</div>            </figure></li><li><p>我们提供了较为完善的数据信息，帮助用户更好理解数据：对于表的信息，“Wherehows”除了提供表和字段的中英文名称、描述信息等基础信息外，为了帮助用户更好地理解表的建设思路，我们还提供了表的星型模型（可以关联的一致性维度及对应的维度表）、表的血缘关系等信息。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/完善数据信息帮助理解数据.png" alt="完善数据信息帮助理解数据" title="">                </div>                <div class="image-caption">完善数据信息帮助理解数据</div>            </figure></li><li><p>我们通过评论问答功能，帮助用户可以快速得到问题反馈：如果用户看了信息后还是感到有问题，“Wherehows”提供评论问答的功能，用户通过这个功能可以进行提问，会有相应的负责人进行回复。对于重复问反复问的问题，用户通过查看其它人的提问和回复就能找到答案。并且负责人还会定期的将问答信息沉淀到对应的元数据里，不断地对元数据进行补充和完善。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/评论问答,快速反馈.png" alt="评论问答,快速反馈" title="">                </div>                <div class="image-caption">评论问答,快速反馈</div>            </figure></li></ol><h5 id="业务数据场景"><a href="#业务数据场景" class="headerlink" title="业务数据场景"></a>业务数据场景</h5><p>　　业务数据场景主要想解决的一个问题是，如何知道一个业务表（MySQL 表）有没有同步到数仓。如果没有同步，能够找谁进行同步。因为已经打通“业务表 -&gt; 数仓表 -&gt; 产品”三者之间的血缘关系，我们能够轻松解决业务数据场景的问题。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/业务数据场景.png" alt="业务数据场景" title="">                </div>                <div class="image-caption">业务数据场景</div>            </figure><h5 id="生产评估场景"><a href="#生产评估场景" class="headerlink" title="生产评估场景"></a>生产评估场景</h5><p>　　在日常数据生产工作中，我们经常需要对表进行影响评估、故障排查、链路分析等工作，这些工作如果靠纯人工去做，费时费力。但现在我们已经打通了“业务表 &#x2F; 字段 -&gt; 数仓表 &#x2F; 字段 -&gt; 产品”三者之间的血缘关系，就能够在 10 分钟内完成评估工作。对于不同的场景，血缘链路提供了两个便捷的功能：过滤和剪枝。例如，某个表逻辑需要修改，需要看影响哪些下游表或产品？应该要通知哪些 RD 和 PM？这种情况下，血缘工具直观地显示影响了哪些负责人和产品，以及这个表的下游链路。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/生产评估场景.png" alt="生产评估场景" title="">                </div>                <div class="image-caption">生产评估场景</div>            </figure><p>　　有些表的链路很长，整个血缘关系图很大，这样会导致用户定位信息或问题。所以血缘工具提供了剪枝的功能，对于没用的、不想看到的分支可以剪掉，从而让整个链路变得更加直观。</p><h4 id="数据可视化（QuickSight）"><a href="#数据可视化（QuickSight）" class="headerlink" title="数据可视化（QuickSight）"></a>数据可视化（QuickSight）</h4><p>　　聚焦于数据使用者“取数”场景，使用 QuickSight，用户可以不再关心数据的来源，不再担心数据的一致性，不再依赖 RD 的排期开发。通过所选即所得的方式，满足了用户对业务核心指标的二次加工、报表和取数诉求。首先，我们通过指标池、数据集等概念对离线生产的指标进行逻辑隔离，针对不同用户开发不同的数据集以达到权限控制的目的，如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/用户、指标池与数据集间的关系.png" alt="用户、指标池与数据集间的关系" title="">                </div>                <div class="image-caption">用户、指标池与数据集间的关系</div>            </figure><p>　　其次，我们为用户提供一系列的组件，帮助用户基于为其开放的数据集实现指标的二次加工和数据可视化功能，满足其在不同业务场景下的取数和可视化应用。如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/指标加工组件01.png" alt="指标加工组件01" title="">                </div>                <div class="image-caption">指标加工组件01</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/美团配送数据治理实践/指标加工组件02.png" alt="指标加工组件02" title="">                </div>                <div class="image-caption">指标加工组件02</div>            </figure><h3 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h3><p>　　经过三个阶段的治理工作，我们在各个方面都取得了较好的效果：<br>•在数据标准方面，我们制定了业务标准、技术标准、安全标准、资源管理标准，从而保障了数据生产、管理、使用合规。<br>•在数据架构方面，我们通过桥接表、时间刻度化、业务口径下沉等手段提升模型灵活性，并保障数据一致性，消除跨层引用和模型冗余等问题。<br>•在数据安全方面，我们加强了对敏感数据和数据共享环节的安全治理，保证数据拿不走、走不脱，隐私数据看不懂。<br>•在元数据建设方面，我们打通了从采集到构建再到应用的整条链路，并为数据使用人员提供数据地图、数据可视化等元数据应用产品，帮助他们解决了“找数”、“取数”、“影响评估”等难题。<br>　　未来，我们还会继续通过组织、规范、流程等手段持续对数据安全、资源利用、数据质量等各方面进行治理，并在数据易用性上下功夫，持续降低用户的数据使用成本。<br>•在数据架构方面，随着数据库技术的飞速进步，现在已经有很多数据库能够支持千万级乃至亿级数据的现算先用，我们也在尝试使用这些数据库帮助提升数据开发效率，改善数仓分层管理和应用支撑效率。<br>•在数据产品方面，我们将持续完善数据地图、数据可视化等数据应用产品，帮助用户快速探查、高效分析，真正发挥数据的业务价值。</p><p>原文链接：<br><a href="https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;mid=2651751418&amp;idx=2&amp;sn=11f4d11b492c3390d99044a279ca69f2&amp;chksm=bd125ab78a65d3a159d6e722e87d650d1ba5745f0ff0dbbb11e3036983b75982dce2a9e6cdcb&amp;scene=27#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&amp;mid=2651751418&amp;idx=2&amp;sn=11f4d11b492c3390d99044a279ca69f2&amp;chksm=bd125ab78a65d3a159d6e722e87d650d1ba5745f0ff0dbbb11e3036983b75982dce2a9e6cdcb&amp;scene=27#wechat_redirect</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;作者:&lt;br&gt;王鹏，2016 年加入美团点评，目前在配送事业部数据团队负责众包业务数据建设、数据治理和系统化相关工作。&lt;br&gt;家豪，2018 年加入美团点评，目前在配送事业部数据团队负责众包业务数据建设、数据治理和系统化相关工作。&lt;/p&gt;
&lt;p&gt;背景&lt;/p&gt;
&lt;p&gt;　　大数</summary>
      
    
    
    
    
    <category term="数据" scheme="http://wongsuechang.github.io/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>阿里Sophix热更新从入门到应用</title>
    <link href="http://wongsuechang.github.io/2019/09/24/%E9%98%BF%E9%87%8CSophix%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BA%94%E7%94%A8/"/>
    <id>http://wongsuechang.github.io/2019/09/24/%E9%98%BF%E9%87%8CSophix%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BA%94%E7%94%A8/</id>
    <published>2019-09-24T09:59:49.000Z</published>
    <updated>2019-10-29T19:53:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言<br></h3><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;用户在某些情况下不愿意手动点击更新，同时产品提出公司App做到无感修复更新。综合考虑各大厂商热更新方案，倾向于阿里的Sophix方案，原因如下：</p><pre><code>1. so文件替换更新2. 资源文件替换3. 尽量可以做到实时修复</code></pre><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Sophix修复方案加分项： ①支持加密传输和签名校验； ②性能损耗低； ③接入开发成本低； ④价格合适。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/hot_fix.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><h3 id="2、集成准备"><a href="#2、集成准备" class="headerlink" title="2、集成准备"></a>2、集成准备<br></h3><h4 id="2-1-android-studio集成"><a href="#2-1-android-studio集成" class="headerlink" title="2.1 android studio集成"></a>2.1 android studio集成<br></h4><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;gradle远程仓库依赖, 打开项目找到app的build.gradle文件，添加如下配置：<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;添加maven仓库地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url &quot;http://maven.aliyun.com/nexus/content/repositories/releases&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;添加gradle坐标版本依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &#x27;com.aliyun.ams:alicloud-android-hotfix:3.2.8&#x27;</span><br></pre></td></tr></table></figure><p><strong>注意：使用android studio打包生成apk时，要关闭instant run。</strong></p><h4 id="2-2-权限"><a href="#2-2-权限" class="headerlink" title="2.2 权限"></a>2.2 权限<br></h4><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Sophix SDK使用到以下权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;! -- 网络权限 --&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;</span><br><span class="line">&lt;! -- 外部存储读权限，调试工具加载本地补丁需要 --&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;READ_EXTERNAL_STORAGE权限属于Dangerous Permissions，仅调试工具获取外部补丁需要，不影响线上发布的补丁加载，调试时请自行做好android6.0以上的运行时权限获取。</p><h4 id="2-3-AndroidManifest文件配置"><a href="#2-3-AndroidManifest文件配置" class="headerlink" title="2.3 AndroidManifest文件配置"></a>2.3 AndroidManifest文件配置<br></h4><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在 <strong>AndroidManifest.xml</strong> 中间的 <strong>application</strong>节点下添加如下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">android:name=&quot;com.taobao.android.hotfix.IDSECRET&quot;</span><br><span class="line">android:value=&quot;App ID&quot; /&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">android:name=&quot;com.taobao.android.hotfix.APPSECRET&quot;</span><br><span class="line">android:value=&quot;App Secret&quot; /&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">android:name=&quot;com.taobao.android.hotfix.RSASECRET&quot;</span><br><span class="line">android:value=&quot;RSA密钥&quot; /&gt;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;将上述value中的值分别改为通过平台HotFix服务申请得到的App Secret和RSA密钥，出于安全考虑，建议使用setSecretMetaData这个方法进行设置。<br><br><strong>另外，热修复暂不支持EMAS统一插件的json文件读取。</strong></p><h4 id="2-4-混淆配置"><a href="#2-4-混淆配置" class="headerlink" title="2.4 混淆配置"></a>2.4 混淆配置<br></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#基线包使用，生成mapping.txt</span><br><span class="line">-printmapping mapping.txt</span><br><span class="line">#生成的mapping.txt在app/build/outputs/mapping/release路径下，移动到/app路径下</span><br><span class="line">#修复后的项目使用，保证混淆结果一致</span><br><span class="line">#-applymapping mapping.txt</span><br><span class="line">#hotfix</span><br><span class="line">-keep class com.taobao.sophix.**&#123;*;&#125;</span><br><span class="line">-keep class com.ta.utdid2.device.**&#123;*;&#125;</span><br><span class="line">-dontwarn com.alibaba.sdk.android.utils.**</span><br><span class="line">#防止inline</span><br><span class="line">-dontoptimize</span><br></pre></td></tr></table></figure><h3 id="3-SDK接口使用说明"><a href="#3-SDK接口使用说明" class="headerlink" title="3 SDK接口使用说明"></a>3 SDK接口使用说明<br></h3><h4 id="3-1-接入范例"><a href="#3-1-接入范例" class="headerlink" title="3.1 接入范例"></a>3.1 接入范例</h4><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;initialize的调用应该尽可能的早，必须在Application.attachBaseContext()的最开始（在super.attachBaseContext之后，如果有Multidex，也需要在Multidex.install之后）进行SDK初始化操作，初始化之前不能用到其他自定义类，否则极有可能导致崩溃。而查询服务器是否有可用补丁的操作可以在后面的任意地方。不建议在Application.onCreate()中初始化，因为如果带有ContentProvider，就会使得Sophix初始化时机太迟从而引发问题。<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;从app稳定性角度考虑，我们应采用稳健接入方式。原来的初始化方式虽然可以使用，但新方式可以提供更全面的功能修复支持。新的初始化方式带来如下有点：<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.初始化与应用原先业务代码完全隔离，使得原先真正的Application可以修复；<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2.减少了补丁预加载时间；<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3.更完美地兼容Android 8.0以后版本。<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;具体接入，需要用到以下这个类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package com.machinsight.dcollision;</span><br><span class="line">import android.app.Application;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.support.annotation.Keep;</span><br><span class="line">import android.util.Log;</span><br><span class="line">import com.taobao.sophix.PatchStatus;</span><br><span class="line">import com.taobao.sophix.SophixApplication;</span><br><span class="line">import com.taobao.sophix.SophixEntry;</span><br><span class="line">import com.taobao.sophix.SophixManager;</span><br><span class="line">import com.taobao.sophix.listener.PatchLoadStatusListener;</span><br><span class="line">import com.my.pkg.MyRealApplication;</span><br><span class="line">/**</span><br><span class="line"> * Sophix入口类，专门用于初始化Sophix，不应包含任何业务逻辑。</span><br><span class="line"> * 此类必须继承自SophixApplication，onCreate方法不需要实现。</span><br><span class="line"> * 此类不应与项目中的其他类有任何互相调用的逻辑，必须完全做到隔离。</span><br><span class="line"> * AndroidManifest中设置application为此类，而SophixEntry中设为原先Application类。</span><br><span class="line"> * 注意原先Application里不需要再重复初始化Sophix，并且需要避免混淆原先Application类。</span><br><span class="line"> * 如有其它自定义改造，请咨询官方后妥善处理。</span><br><span class="line"> */</span><br><span class="line">public class SophixStubApplication extends SophixApplication &#123;</span><br><span class="line">    private final String TAG = &quot;SophixStubApplication&quot;;</span><br><span class="line">    // 此处SophixEntry应指定真正的Application，并且保证RealApplicationStub类名不被混淆。</span><br><span class="line">    @Keep</span><br><span class="line">    @SophixEntry(MyRealApplication.class)</span><br><span class="line">    static class RealApplicationStub &#123;&#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void attachBaseContext(Context base) &#123;</span><br><span class="line">        super.attachBaseContext(base);</span><br><span class="line">//         如果需要使用MultiDex，需要在此处调用。</span><br><span class="line">//         MultiDex.install(this);</span><br><span class="line">        initSophix();</span><br><span class="line">    &#125;</span><br><span class="line">    private void initSophix() &#123;</span><br><span class="line">        String appVersion = &quot;0.0.0&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            appVersion = this.getPackageManager()</span><br><span class="line">                             .getPackageInfo(this.getPackageName(), 0)</span><br><span class="line">                             .versionName;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        final SophixManager instance = SophixManager.getInstance();</span><br><span class="line">        instance.setContext(this)</span><br><span class="line">                .setAppVersion(appVersion)</span><br><span class="line">                .setSecretMetaData(null, null, null)</span><br><span class="line">                .setEnableDebug(true)</span><br><span class="line">                .setEnableFullLog()</span><br><span class="line">                .setPatchLoadStatusStub(new PatchLoadStatusListener() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onLoad(final int mode, final int code, final String info, final int handlePatchVersion) &#123;</span><br><span class="line">                        if (code == PatchStatus.CODE_LOAD_SUCCESS) &#123;</span><br><span class="line">                            Log.i(TAG, &quot;sophix load patch success!&quot;);</span><br><span class="line">                        &#125; else if (code == PatchStatus.CODE_LOAD_RELAUNCH) &#123;</span><br><span class="line">                            // 如果需要在后台重启，建议此处用SharePreference保存状态。</span><br><span class="line">                            Log.i(TAG, &quot;sophix preload patch success. restart app to make effect.&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).initialize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// queryAndLoadNewPatch不可放在attachBaseContext 中，否则无网络权限，建议放在后面任意时刻，如onCreate中</span><br><span class="line">SophixManager.getInstance().queryAndLoadNewPatch();</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;其中关键一点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Keep</span><br><span class="line">@SophixEntry(MyRealApplication.class)</span><br><span class="line">static class RealApplicationStub &#123;&#125;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SophixEntry应指定项目中原先真正的Application（原项目里application的android::name指定的），这里用MyRealApplication指代。并且保证RealApplicationStub类名不被混淆。而SophixStubApplication的类名和包名可以自行取名。<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这里的Keep是android.support包中的类，目的是为了防止这个内部静态类的类名被混淆，因为sophix内部会反射获取这个类的SophixEntry。如果项目中没有依赖android.support的话，就需要在progurad里面手动指定RealApplicationStub不被混淆，详见下文。<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;然后，在proguard文件里面需要加上下面内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-keepclassmembers class com.my.pkg.MyRealApplication &#123;</span><br><span class="line">    public &lt;init&gt;();</span><br><span class="line">&#125;</span><br><span class="line"># 如果不使用android.support.annotation.Keep则需加上此行</span><br><span class="line"># -keep class com.my.pkg.SophixStubApplication$RealApplicationStub</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;目的是防止真正Application的构造方法被proguard混淆。<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最后，需要把AndroidManifest里面的application改为这个新增的SophixStubApplication类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">    android:name=&quot;com.my.pkg.SophixStubApplication&quot;</span><br><span class="line">    ... ...&gt;</span><br><span class="line">    ... ...</span><br></pre></td></tr></table></figure><p>总结一下，过程一共有四个步骤：<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1.把此SophixStubApplication入口类添加进项目中，所有Sophix相关初始化放在此类中。并且不应包含开发者的任何业务逻辑代码。若使用了MultiDex，也应在SophixStubApplication的initSophix之前添加，并且需要记得在原来的Application里面去除MultiDex，避免重复调用导致问题。<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2.把RealApplicationStub的SophixEntry注解的内容改为自己原先真正的MyRealApplication类。<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3.混淆文件中确保某些内容不被混淆。<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4.AndroidManifest里面的application改为新增的SophixStubApplication入口类。<br></p><h4 id="3-2-接口说明"><a href="#3-2-接口说明" class="headerlink" title="3.2 接口说明"></a>3.2 接口说明<br></h4><h5 id="3-2-1-initialize方法"><a href="#3-2-1-initialize方法" class="headerlink" title="3.2.1 initialize方法"></a>3.2.1 initialize方法<br></h5><ul><li><p>initialize(): &lt;必选&gt;<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;该方法主要做些必要的初始化工作以及如果本地有补丁的话会加载补丁, 但不会自动请求补丁。因此需要自行调用queryAndLoadNewPatch方法拉取补丁。这个方法调用需要尽可能的早, 必须在Application的attachBaseContext方法的最前面调用（在super.attachBaseContext之后，如果有Multidex，也需要在Multidex.install之后）, initialize()方法调用之前你需要先调用如下几个方法进行一些必要的参数设置, 方法调用说明如下:</p></li><li><p>setContext(application): &lt;必选&gt; 传入入口Application即可</p></li><li><p>setAppVersion(appVersion): &lt;必选&gt; 应用的版本号</p></li><li><p>setSecretMetaData(idSecret, appSecret, rsaSecret): &lt;可选，推荐使用&gt; 三个Secret分别对应AndroidManifest里面的三个，可以不在AndroidManifest设置而是用此函数来设置Secret。放到代码里面进行设置可以自定义混淆代码，更加安全，此函数的设置会覆盖AndroidManifest里面的设置，如果对应的值设为null，默认会在使用AndroidManifest里面的。</p></li><li><p>setEnableDebug(isEnabled): &lt;可选&gt; isEnabled默认为false, 是否调试模式, 调试模式下会输出日志以及不进行补丁签名校验. 线下调试此参数可以设置为true, 查看日志过滤TAG:Sophix, 同时强制不对补丁进行签名校验, 所有就算补丁未签名或者签名失败也发现可以加载成功. 但是正式发布该参数必须为false, false会对补丁做签名校验, 否则就可能存在安全漏洞风险</p></li><li><p>setAesKey(aesKey): &lt;可选&gt; 用户自定义aes秘钥, 会对补丁包采用对称加密。这个参数值必须是16位数字或字母的组合，是和补丁工具设置里面AES Key保持完全一致, 补丁才能正确被解密进而加载。此时平台无感知这个秘钥, 所以不用担心阿里云移动平台会利用你们的补丁做一些非法的事情。</p></li><li><p>setPatchLoadStatusStub(new PatchLoadStatusListener()): &lt;可选&gt; 设置patch加载状态监听器, 该方法参数需要实现PatchLoadStatusListener接口, 接口说明见3.2.说明</p></li><li><p>setUnsupportedModel(modelName, sdkVersionInt):&lt;可选&gt; 把不支持的设备加入黑名单，加入后不会进行热修复。modelName为该机型上Build.MODEL的值，这个值也可以通过adb shell getprop | grep ro.product.model取得。sdkVersionInt就是该机型的Android版本，也就是Build.VERSION.SDK_INT，若设为0，则对应该机型所有安卓版本。目前控制台也可以直接设置机型黑名单，更加灵活。</p></li></ul><h5 id="3-2-2-queryAndLoadNewPatch方法"><a href="#3-2-2-queryAndLoadNewPatch方法" class="headerlink" title="3.2.2 queryAndLoadNewPatch方法"></a>3.2.2 queryAndLoadNewPatch方法</h5><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;该方法主要用于查询服务器是否有新的可用补丁. SDK内部限制连续两次queryAndLoadNewPatch()方法调用不能短于3s, 否则的话就会报code:19的错误码. 如果查询到可用的话, 首先下载补丁到本地。</p><ul><li>应用原本没有补丁, 那么如果当前应用的补丁是热补丁, 那么会立刻加载(不管是冷补丁还是热补丁). 如果当前应用的补丁是冷补丁, 那么需要重启生效.</li><li><strong>应用已经存在一个补丁, 请求发现有新补丁后，本次不受影响。并且在下次启动时补丁文件删除, 下载并预加载新补丁。在下下次启动时应用新补丁。</strong> 补丁在后台发布之后, 并不会主动下行推送到客户端, 需要手动调用queryAndLoadNewPatch方法查询后台补丁是否可用.</li><li>只会下载补丁版本号比当前应用存在的补丁版本号高的补丁, 比如当前应用已经下载了补丁版本号为5的补丁, 那么只有后台发布的补丁版本号&gt;5才会重新下载.</li></ul><p> 同时1.4.0以上版本服务后台上线了“一键清除”补丁的功能, 所以如果后台点击了“一键清除”那么这个方法将会返回code:18的状态码. 此时本地补丁将会被强制清除, 同时不清除本地补丁版本号</p><h5 id="3-2-3-killProcessSafely方法"><a href="#3-2-3-killProcessSafely方法" class="headerlink" title="3.2.3 killProcessSafely方法"></a>3.2.3 killProcessSafely方法</h5><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;可以在PatchLoadStatusListener监听到CODE_LOAD_RELAUNCH后在合适的时机，调用此方法杀死进程。注意，不可以直接Process.killProcess(Process.myPid())来杀进程，这样会扰乱Sophix的内部状态。因此如果需要杀死进程，建议使用这个方法，它在内部做一些适当处理后才杀死本进程。</p><h5 id="3-2-4-cleanPatches-方法"><a href="#3-2-4-cleanPatches-方法" class="headerlink" title="3.2.4 cleanPatches()方法"></a>3.2.4 cleanPatches()方法</h5><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;清空本地补丁，并且不再拉取被清空的版本的补丁。正常情况下不需要开发者自己调用，因为Sophix内部会判断对补丁引发崩溃的情况进行自动清空。</p><h5 id="3-2-5-PatchLoadStatusListener接口"><a href="#3-2-5-PatchLoadStatusListener接口" class="headerlink" title="3.2.5 PatchLoadStatusListener接口"></a>3.2.5 PatchLoadStatusListener接口</h5><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;该接口需要自行实现并传入initialize方法中, 补丁加载状态会回调给该接口, 参数说明如下:</p><ul><li>mode: 无实际意义, 为了兼容老版本, 默认始终为0</li><li>code: 补丁加载状态码, 详情查看PatchStatus类说明</li><li>info: 补丁加载详细说明</li><li>handlePatchVersion: 当前处理的补丁版本号, 0:无 -1:本地补丁 其它:后台补丁<br>常见状态码说明如下: 一个补丁的加载一般分为三个阶段: 查询&#x2F;预加载&#x2F;加载<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//兼容老版本的code说明</span><br><span class="line">    int CODE_LOAD_SUCCESS = 1;//加载阶段, 成功</span><br><span class="line">    int CODE_ERR_INBLACKLIST = 4;//加载阶段, 失败设备不支持</span><br><span class="line">    int CODE_REQ_NOUPDATE = 6;//查询阶段, 没有发布新补丁</span><br><span class="line">    int CODE_REQ_NOTNEWEST = 7;//查询阶段, 补丁不是最新的</span><br><span class="line">    int CODE_DOWNLOAD_SUCCESS = 9;//查询阶段, 补丁下载成功</span><br><span class="line">    int CODE_DOWNLOAD_BROKEN = 10;//查询阶段, 补丁文件损坏下载失败</span><br><span class="line">    int CODE_UNZIP_FAIL = 11;//查询阶段, 补丁解密失败</span><br><span class="line">    int CODE_LOAD_RELAUNCH = 12;//预加载阶段, 需要重启</span><br><span class="line">    int CODE_REQ_APPIDERR = 15;//查询阶段, appid异常</span><br><span class="line">    int CODE_REQ_SIGNERR = 16;//查询阶段, 签名异常</span><br><span class="line">    int CODE_REQ_UNAVAIABLE = 17;//查询阶段, 系统无效</span><br><span class="line">    int CODE_REQ_SYSTEMERR = 22;//查询阶段, 系统异常</span><br><span class="line">    int CODE_REQ_CLEARPATCH = 18;//查询阶段, 一键清除补丁</span><br><span class="line">    int CODE_PATCH_INVAILD = 20;//加载阶段, 补丁格式非法</span><br><span class="line">    //查询阶段的code说明</span><br><span class="line">    int CODE_QUERY_UNDEFINED = 31;//未定义异常</span><br><span class="line">    int CODE_QUERY_CONNECT = 32;//连接异常</span><br><span class="line">    int CODE_QUERY_STREAM = 33;//流异常</span><br><span class="line">    int CODE_QUERY_EMPTY = 34;//请求空异常</span><br><span class="line">    int CODE_QUERY_BROKEN = 35;//请求完整性校验失败异常</span><br><span class="line">    int CODE_QUERY_PARSE = 36;//请求解析异常</span><br><span class="line">    int CODE_QUERY_LACK = 37;//请求缺少必要参数异常</span><br><span class="line">    //预加载阶段的code说明</span><br><span class="line">    int CODE_PRELOAD_SUCCESS = 100;//预加载成功</span><br><span class="line">    int CODE_PRELOAD_UNDEFINED = 101;//未定义异常</span><br><span class="line">    int CODE_PRELOAD_HANDLE_DEX = 102;//dex加载异常</span><br><span class="line">    int CODE_PRELOAD_NOT_ZIP_FORMAT = 103;//基线dex非zip格式异常</span><br><span class="line">    int CODE_PRELOAD_REMOVE_BASEDEX = 105;//基线dex处理异常</span><br><span class="line">    //加载阶段的code说明 分三部分dex加载, resource加载, lib加载</span><br><span class="line">    //dex加载</span><br><span class="line">    int CODE_LOAD_UNDEFINED = 71;//未定义异常</span><br><span class="line">    int CODE_LOAD_AES_DECRYPT = 72;//aes对称解密异常</span><br><span class="line">    int CODE_LOAD_MFITEM = 73;//补丁SOPHIX.MF文件解析异常</span><br><span class="line">    int CODE_LOAD_COPY_FILE = 74;//补丁拷贝异常</span><br><span class="line">    int CODE_LOAD_SIGNATURE = 75;//补丁签名校验异常</span><br><span class="line">    int CODE_LOAD_SOPHIX_VERSION = 76;//补丁和补丁工具版本不一致异常</span><br><span class="line">    int CODE_LOAD_NOT_ZIP_FORMAT = 77;//补丁zip解析异常</span><br><span class="line">    int CODE_LOAD_DELETE_OPT = 80;//删除无效odex文件异常</span><br><span class="line">    int CODE_LOAD_HANDLE_DEX = 81;//加载dex异常</span><br><span class="line">    // 反射调用异常</span><br><span class="line">    int CODE_LOAD_FIND_CLASS = 82;</span><br><span class="line">    int CODE_LOAD_FIND_CONSTRUCTOR = 83;</span><br><span class="line">    int CODE_LOAD_FIND_METHOD = 84;</span><br><span class="line">    int CODE_LOAD_FIND_FIELD = 85;</span><br><span class="line">    int CODE_LOAD_ILLEGAL_ACCESS = 86;</span><br><span class="line">    //resource加载</span><br><span class="line">    public static final int CODE_LOAD_RES_ADDASSERTPATH = 123;//新增资源补丁包异常</span><br><span class="line">    //lib加载</span><br><span class="line">    int CODE_LOAD_LIB_UNDEFINED = 131;//未定义异常</span><br><span class="line">    int CODE_LOAD_LIB_CPUABIS = 132;//获取primaryCpuAbis异常</span><br><span class="line">    int CODE_LOAD_LIB_JSON = 133;//json格式异常</span><br><span class="line">    int CODE_LOAD_LIB_LOST = 134;//lib库不完整异常</span><br><span class="line">    int CODE_LOAD_LIB_UNZIP = 135;//解压异常</span><br><span class="line">    int CODE_LOAD_LIB_INJECT = 136;//注入异常</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-2-6-setTags接口"><a href="#3-2-6-setTags接口" class="headerlink" title="3.2.6 setTags接口"></a>3.2.6 setTags接口</h5><p>该参数设置端上拉取补丁包时的标签，可以支持条件更为丰富的灰度发布，以下为简单示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; tags = new ArrayList&lt;&gt;();</span><br><span class="line">tags.add(&quot;test&quot;);</span><br><span class="line">//此处调用在queryAndLoadNewPatch()方法前</span><br><span class="line">SophixManager.getInstance().setTags(tags)；</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; tags = new ArrayList&lt;&gt;();</span><br><span class="line">tags.add(&quot;production&quot;);</span><br><span class="line">//此处调用在queryAndLoadNewPatch()方法前</span><br><span class="line">SophixManager.getInstance().setTags(tags)；</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;如上，设置不同的tags，同一版本号下，可以打两个或者多个基线包，线上发布时用production的基线包，测试环境用test的基线包，这样就可以测试同一版本号下的同一个补丁了，两个环境互不影响。tags可以add多个，结构为前后非空字符串即可。生成补丁时，用同样tags的基线包和修复包。</p><h3 id="4-版本管理说明"><a href="#4-版本管理说明" class="headerlink" title="4 版本管理说明"></a>4 版本管理说明</h3><p><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;说明一：patch是针对客户端具体某个版本的，patch和具体版本绑定<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; - 应用当前版本号是1.1.0, 那么只能在后台查询到1.1.0版本对应发布的补丁, 而查询不到之前1.0.0旧版本发布的补丁.<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;说明二：针对某个具体版本发布的新补丁, 必须包含所有的bugfix, 而不能依赖补丁递增修复的方式, 因为应用仅可能加载一个补丁<br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; - 针对1.0.0版本在后台发布了一个补丁版本号为1的补丁修复了bug1, 然后发现此时针对这个版本补丁1修复的不完全, 代码还有bug2, 在后台重新发布一个补丁版本号为2的补丁, 那么此时补丁2就必须同时包含bug1和bug2的修复才行, 而不是只包含bug2的修复(bug1就没被修复了)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-引言&quot;&gt;&lt;a href=&quot;#1-引言&quot; class=&quot;headerlink&quot; title=&quot;1.引言&quot;&gt;&lt;/a&gt;1.引言&lt;br&gt;&lt;/h3&gt;&lt;p&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbs</summary>
      
    
    
    
    
    <category term="android学习" scheme="http://wongsuechang.github.io/tags/android%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="app开发" scheme="http://wongsuechang.github.io/tags/app%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>persistent=&quot;true&quot;分析</title>
    <link href="http://wongsuechang.github.io/2019/09/24/persistent-true%E5%88%86%E6%9E%90/"/>
    <id>http://wongsuechang.github.io/2019/09/24/persistent-true%E5%88%86%E6%9E%90/</id>
    <published>2019-09-24T07:11:19.000Z</published>
    <updated>2019-10-29T19:53:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、标识persistent-x3D-”true”的app启动过程"><a href="#一、标识persistent-x3D-”true”的app启动过程" class="headerlink" title="一、标识persistent&#x3D;”true”的app启动过程"></a>一、标识persistent&#x3D;”true”的app启动过程<br></h4><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在源码&#x2F;frameworks&#x2F;base&#x2F;core&#x2F;res&#x2F;res&#x2F;values&#x2F;attrs_manifest.xml中这样描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Flag to control special persistent mode of an application. This should</span><br><span class="line">     not normally be used by applications; it requires that the system keep</span><br><span class="line">     your application running at all times. --&gt;</span><br><span class="line">&lt;attr name=&quot;persistent&quot; format=&quot;boolean&quot; /&gt;</span><br></pre></td></tr></table></figure><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置该属性的app有如下特点：<br><pre><code>* 在android系统启动的时候会自动启动；* app被强制杀掉后，系统会重新启动app，app必须安装在/system/app路径下。</code></pre><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app在安装或者系统启动的时候解析androidmanifest.xml文件中的persistent属性，解析源码在/frameworks/base/core/java/com/android/content/pm/PackageParser.java<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private boolean parseBaseApplication(Package owner, Resources res,</span><br><span class="line">                                     XmlPullParser parser,</span><br><span class="line">                                     AttributeSet attrs,</span><br><span class="line">                                     int flags,</span><br><span class="line">                                     String[] outError)</span><br><span class="line">                                     throws XmlPullParserException, IOException &#123;</span><br><span class="line">    // ............</span><br><span class="line">    if ((flags&amp;PARSE_IS_SYSTEM) != 0) &#123;</span><br><span class="line">         if (sa.getBoolean(</span><br><span class="line">                 com.android.internal</span><br><span class="line">                    .R.styleable.AndroidManifestApplication_persistent,</span><br><span class="line">                 false)) &#123;</span><br><span class="line">             ai.flags |= ApplicationInfo.FLAG_PERSISTENT;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     // ............</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;系统启动，在systemReady()加载所有persistent&#x3D;true的应用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public void systemReady(final Runnable goingCallback) &#123;</span><br><span class="line">     // ............</span><br><span class="line">     try &#123;</span><br><span class="line">          List apps = AppGlobals.getPackageManager()</span><br><span class="line">                            .getPersistentApplications(STOCK_PM_FLAGS);</span><br><span class="line">          if (apps != null) &#123;</span><br><span class="line">              int N = apps.size();</span><br><span class="line">              int i;</span><br><span class="line">              for (i=0; i&lt;N; i++) &#123;</span><br><span class="line">                  ApplicationInfo info = (ApplicationInfo)apps.get(i);</span><br><span class="line">                  if (info != null &amp;&amp;</span><br><span class="line">                          !info.packageName.equals(&quot;android&quot;))</span><br><span class="line">                      &#123;</span><br><span class="line">                         addAppLocked(info, false);</span><br><span class="line">                      &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; catch (RemoteException ex) &#123;</span><br><span class="line">          // pm is in same process, this will never happen.</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;其中 getPersistentApplications()函数的定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;ApplicationInfo&gt; getPersistentApplications(int flags) &#123;</span><br><span class="line">      final ArrayList&lt;ApplicationInfo&gt; finalList</span><br><span class="line">         = new ArrayList&lt;ApplicationInfo&gt;();</span><br><span class="line">      // reader</span><br><span class="line">      synchronized (mPackages)</span><br><span class="line">      &#123;</span><br><span class="line">          final Iterator&lt;PackageParser.Package&gt; i</span><br><span class="line">             = mPackages.values().iterator();</span><br><span class="line">          final int userId = UserId.getCallingUserId();</span><br><span class="line">          while (i.hasNext())</span><br><span class="line">          &#123;</span><br><span class="line">              final PackageParser.Package p = i.next();</span><br><span class="line">              if (p.applicationInfo != null</span><br><span class="line">                  &amp;&amp; (p.applicationInfo.flags</span><br><span class="line">                         &amp; ApplicationInfo.FLAG_PERSISTENT) != 0</span><br><span class="line">                  &amp;&amp; (!mSafeMode || isSystemApp(p)))</span><br><span class="line">              &#123;</span><br><span class="line">                  PackageSetting ps = mSettings</span><br><span class="line">                    .mPackages.get(p.packageName);</span><br><span class="line">                  finalList.add(PackageParser.generateApplicationInfo(p, flags,</span><br><span class="line">                          ps != null ? ps.getStopped(userId) : false,</span><br><span class="line">                          ps != null ? ps.getEnabled(userId) : COMPONENT_ENABLED_STATE_DEFAULT,</span><br><span class="line">                          userId));</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return finalList;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在PKMS中，有一个记录所有的程序包信息的哈希表（mPackages），每个表项中含有ApplicationInfo信息，该信息的flags（int型）数据中有一个专门的bit用于表示persistent。getPersistentApplications()函数会遍历这张表，找出所有persistent包，如果选中的persistent包是系统应用，或者当前系统处于非安全模式，则将persistent包添加到ArrayList<ApplicationInfo>。</p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;随后systemReady()开始遍历选中的ApplicationInfo，并对包名不为“android”的结点执行addAppLocked()。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">final ProcessRecord addAppLocked(ApplicationInfo info, boolean isolated) &#123;</span><br><span class="line">     ProcessRecord app;</span><br><span class="line">     if (!isolated) &#123;</span><br><span class="line">         app = getProcessRecordLocked(info.processName, info.uid);</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">         app = null;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     if (app == null) &#123;</span><br><span class="line">         app = newProcessRecordLocked(null, info, null, isolated);</span><br><span class="line">         mProcessNames.put(info.processName, app.uid, app);</span><br><span class="line">         if (isolated) &#123;</span><br><span class="line">             mIsolatedProcesses.put(app.uid, app);</span><br><span class="line">         &#125;</span><br><span class="line">         updateLruProcessLocked(app, true, true);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     // This package really, really can not be stopped.</span><br><span class="line">     try &#123;</span><br><span class="line">         AppGlobals</span><br><span class="line">            .getPackageManager()</span><br><span class="line">            .setPackageStoppedState( info.packageName, false, UserId.getUserId(app.uid));</span><br><span class="line">     &#125; catch (RemoteException e) &#123;</span><br><span class="line">     &#125; catch (IllegalArgumentException e) &#123;</span><br><span class="line">         Slog.w(TAG, &quot;Failed trying to unstop package &quot; + info.packageName + &quot;: &quot; + e);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     if ((info.flags&amp;(ApplicationInfo.FLAG_SYSTEM|ApplicationInfo.FLAG_PERSISTENT))</span><br><span class="line">             == (ApplicationInfo.FLAG_SYSTEM|ApplicationInfo.FLAG_PERSISTENT)) &#123;</span><br><span class="line">         app.persistent = true;</span><br><span class="line">         app.maxAdj = ProcessList.PERSISTENT_PROC_ADJ;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     if (app.thread == null</span><br><span class="line">             &amp;&amp; mPersistentStartingProcesses.indexOf(app) &lt; 0) &#123;</span><br><span class="line">         mPersistentStartingProcesses.add(app);</span><br><span class="line">         startProcessLocked(app, &quot;added application&quot;, app.processName);</span><br><span class="line">     &#125;</span><br><span class="line">     return app;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在AMS中，所谓的“add App”主要是指“添加一个与App进程对应的ProcessRecord节点”。在添加节点的动作完成以后，addAppLocked()还会检查App进程是否已经启动好了，如果尚未开始启动，此时就会调用startProcessLocked()启动这个进程。既然addAppLocked()试图确认App“正在正常运作”或者“将被正常启动”，那么其对应的package就不可能处于stopped状态。</p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;自此，我们已知设置了persistent&#x3D;”true”的应用是随着系统启动就即时启动了。</p><h4 id="二、如何保持应用的持久性（persistent）"><a href="#二、如何保持应用的持久性（persistent）" class="headerlink" title="二、如何保持应用的持久性（persistent）"></a>二、如何保持应用的持久性（persistent）<br></h4><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本身persistent一词翻译过来即持久、固执的意思。在android系统内，persistent应用会随着系统启动而启动，一直持续到系统关机。<br><br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;为了保证这种持久性，persistent应用必须能够在异常出现时，自动重新启动。在Android里是这样实现的。每个ActivityThread中会有一个专门和AMS通信的binder实体——final ApplicationThread mAppThread。这个实体在AMS中对应的代理接口为IApplicationThread。<br><br><br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当AMS执行到attachApplicationLocked()时，会针对目标用户进程的IApplicationThread接口，注册一个binder讣告监听器，一旦日后用户进程意外挂掉，AMS就能在第一时间感知到，并采取相应的措施。如果AMS发现意外挂掉的应用是persistent的，它会尝试重新启动这个应用。<br><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private final class AppDeathRecipient implements IBinder.DeathRecipient &#123;</span><br><span class="line">     final ProcessRecord mApp;</span><br><span class="line">     final int mPid;</span><br><span class="line">     final IApplicationThread mAppThread;</span><br><span class="line">     AppDeathRecipient(ProcessRecord app, int pid, IApplicationThread thread) &#123;</span><br><span class="line">         if (localLOGV)</span><br><span class="line">             Slog.v(TAG, &quot;New death recipient &quot; + this + &quot; for thread &quot; + thread.asBinder());</span><br><span class="line">             mApp = app;</span><br><span class="line">             mPid = pid;</span><br><span class="line">             mAppThread = thread;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     public void binderDied() &#123;</span><br><span class="line">         if (localLOGV)</span><br><span class="line">             Slog.v(TAG, &quot;Death received in &quot; + this + &quot; for thread &quot; + mAppThread.asBinder());</span><br><span class="line">         synchronized(ActivityManagerService.this) &#123;</span><br><span class="line">             appDiedLocked(mApp, mPid, mAppThread);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当其监听的binder实体死亡时，系统会回调AppDeathRecipient的binderDied()。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../../../images/binderDied.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般情况下，当一个应用进程挂掉后，AMS当然会清理掉其对应的ProcessRecord，这就是cleanUpApplicationRecordLocked()的主要工作。然而，对于persistent应用，cleanUpApplicationRecordLocked()会尝试再次启动对应的应用进程。]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一、标识persistent-x3D-”true”的app启动过程&quot;&gt;&lt;a href=&quot;#一、标识persistent-x3D-”true”的app启动过程&quot; class=&quot;headerlink&quot; title=&quot;一、标识persistent&amp;#x3D;”true”</summary>
      
    
    
    
    
    <category term="android学习" scheme="http://wongsuechang.github.io/tags/android%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="frameworks" scheme="http://wongsuechang.github.io/tags/frameworks/"/>
    
  </entry>
  
</feed>
